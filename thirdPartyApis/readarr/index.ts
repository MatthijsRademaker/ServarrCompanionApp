// @ts-nocheck
/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Readarr
 * Readarr API docs
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from '@tanstack/vue-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationReturnType,
  UseQueryOptions,
  UseQueryReturnType,
} from '@tanstack/vue-query';
import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';
import { computed, unref } from 'vue';
import type { MaybeRef } from 'vue';
import type {
  ApiInfoResource,
  AuthorEditorResource,
  AuthorResource,
  BackupResource,
  BlocklistBulkResource,
  BlocklistResourcePagingResource,
  BookEditorResource,
  BookFileListResource,
  BookFileResource,
  BookResource,
  BookResourcePagingResource,
  BooksMonitoredResource,
  BookshelfResource,
  CommandResource,
  CustomFilterResource,
  CustomFormatResource,
  DelayProfileResource,
  DeleteApiV1AuthorIdParams,
  DeleteApiV1BookIdParams,
  DeleteApiV1QueueBulkParams,
  DeleteApiV1QueueIdParams,
  DevelopmentConfigResource,
  DiskSpaceResource,
  DownloadClientBulkResource,
  DownloadClientConfigResource,
  DownloadClientResource,
  EditionResource,
  GetApiV1AuthorLookupParams,
  GetApiV1BlocklistParams,
  GetApiV1BookLookupParams,
  GetApiV1BookParams,
  GetApiV1BookfileParams,
  GetApiV1CalendarParams,
  GetApiV1ConfigNamingExamplesParams,
  GetApiV1EditionParams,
  GetApiV1FilesystemMediafilesParams,
  GetApiV1FilesystemParams,
  GetApiV1FilesystemTypeParams,
  GetApiV1HistoryAuthorParams,
  GetApiV1HistoryParams,
  GetApiV1HistorySinceParams,
  GetApiV1LogParams,
  GetApiV1ManualimportParams,
  GetApiV1ParseParams,
  GetApiV1QueueDetailsParams,
  GetApiV1QueueParams,
  GetApiV1ReleaseParams,
  GetApiV1RenameParams,
  GetApiV1RetagParams,
  GetApiV1SearchParams,
  GetApiV1SeriesParams,
  GetApiV1WantedCutoffParams,
  GetApiV1WantedMissingParams,
  GetFeedV1CalendarReadarrIcsParams,
  HealthResource,
  HistoryResource,
  HistoryResourcePagingResource,
  HostConfigResource,
  ImportListBulkResource,
  ImportListExclusionResource,
  ImportListResource,
  IndexerBulkResource,
  IndexerConfigResource,
  IndexerFlagResource,
  IndexerResource,
  LanguageResource,
  LogFileResource,
  LogResourcePagingResource,
  ManualImportResource,
  ManualImportUpdateResource,
  MediaManagementConfigResource,
  MetadataProfileResource,
  MetadataProviderConfigResource,
  MetadataResource,
  NamingConfigResource,
  NotificationResource,
  ParseResource,
  PingResource,
  PostApiV1DownloadclientParams,
  PostApiV1DownloadclientTestParams,
  PostApiV1ImportlistParams,
  PostApiV1ImportlistTestParams,
  PostApiV1IndexerParams,
  PostApiV1IndexerTestParams,
  PostApiV1MetadataParams,
  PostApiV1MetadataTestParams,
  PostApiV1NotificationParams,
  PostApiV1NotificationTestParams,
  PostLoginBody,
  PostLoginParams,
  PutApiV1AuthorIdParams,
  PutApiV1DelayprofileReorderIdParams,
  PutApiV1DownloadclientIdParams,
  PutApiV1ImportlistIdParams,
  PutApiV1IndexerIdParams,
  PutApiV1MetadataIdParams,
  PutApiV1NotificationIdParams,
  QualityDefinitionResource,
  QualityProfileResource,
  QueueBulkResource,
  QueueResource,
  QueueResourcePagingResource,
  QueueStatusResource,
  ReleaseProfileResource,
  ReleaseResource,
  RemotePathMappingResource,
  RenameBookResource,
  RetagBookResource,
  RootFolderResource,
  SearchResource,
  SeriesResource,
  SystemResource,
  TagDetailsResource,
  TagResource,
  TaskResource,
  UiConfigResource,
  UpdateResource,
} from './models';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const getApi = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ApiInfoResource>> => {
  return axios.get(`http://localhost:3001/api`, options);
};

export const getGetApiQueryKey = () => {
  return ['http:', 'localhost:3001', 'api'] as const;
};

export const getGetApiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApi>>> = ({
    signal,
  }) => getApi({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApi>>,
    TError,
    TData
  >;
};

export type GetApiQueryResult = NonNullable<Awaited<ReturnType<typeof getApi>>>;
export type GetApiQueryError = AxiosError<unknown>;

export const useGetApi = <
  TData = Awaited<ReturnType<typeof getApi>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApi>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postLogin = (
  postLoginBody: MaybeRef<PostLoginBody>,
  params?: MaybeRef<PostLoginParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  const formData = new FormData();
  if (postLoginBody.username !== undefined) {
    formData.append('username', postLoginBody.username);
  }
  if (postLoginBody.password !== undefined) {
    formData.append('password', postLoginBody.password);
  }
  if (postLoginBody.rememberMe !== undefined) {
    formData.append('rememberMe', postLoginBody.rememberMe);
  }

  postLoginBody = unref(postLoginBody);
  params = unref(params);
  return axios.post(`http://localhost:3001/login`, formData, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getPostLoginMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: PostLoginBody; params?: PostLoginParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postLogin>>,
    { data: PostLoginBody; params?: PostLoginParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postLogin(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postLogin>>
>;
export type PostLoginMutationBody = PostLoginBody;
export type PostLoginMutationError = AxiosError<unknown>;

export const usePostLogin = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postLogin>>,
    TError,
    { data: PostLoginBody; params?: PostLoginParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postLogin>>,
  TError,
  { data: PostLoginBody; params?: PostLoginParams },
  TContext
> => {
  const mutationOptions = getPostLoginMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getLogin = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:3001/login`, options);
};

export const getGetLoginQueryKey = () => {
  return ['http:', 'localhost:3001', 'login'] as const;
};

export const getGetLoginQueryOptions = <
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetLoginQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogin>>> = ({
    signal,
  }) => getLogin({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLogin>>,
    TError,
    TData
  >;
};

export type GetLoginQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogin>>
>;
export type GetLoginQueryError = AxiosError<unknown>;

export const useGetLogin = <
  TData = Awaited<ReturnType<typeof getLogin>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogin>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLoginQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getLogout = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:3001/logout`, options);
};

export const getGetLogoutQueryKey = () => {
  return ['http:', 'localhost:3001', 'logout'] as const;
};

export const getGetLogoutQueryOptions = <
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetLogoutQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getLogout>>> = ({
    signal,
  }) => getLogout({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLogout>>,
    TError,
    TData
  >;
};

export type GetLogoutQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLogout>>
>;
export type GetLogoutQueryError = AxiosError<unknown>;

export const useGetLogout = <
  TData = Awaited<ReturnType<typeof getLogout>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getLogout>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLogoutQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Author = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AuthorResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/author`, options);
};

export const getGetApiV1AuthorQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'author'] as const;
};

export const getGetApiV1AuthorQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Author>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Author>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1AuthorQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Author>>> = ({
    signal,
  }) => getApiV1Author({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Author>>,
    TError,
    TData
  >;
};

export type GetApiV1AuthorQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Author>>
>;
export type GetApiV1AuthorQueryError = AxiosError<unknown>;

export const useGetApiV1Author = <
  TData = Awaited<ReturnType<typeof getApiV1Author>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Author>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1AuthorQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Author = (
  authorResource: MaybeRef<NonReadonly<AuthorResource>>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AuthorResource>> => {
  authorResource = unref(authorResource);
  return axios.post(
    `http://localhost:3001/api/v1/author`,
    authorResource,
    options
  );
};

export const getPostApiV1AuthorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Author>>,
    TError,
    { data: NonReadonly<AuthorResource> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Author>>,
  TError,
  { data: NonReadonly<AuthorResource> },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Author>>,
    { data: NonReadonly<AuthorResource> }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Author(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1AuthorMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Author>>
>;
export type PostApiV1AuthorMutationBody = NonReadonly<AuthorResource>;
export type PostApiV1AuthorMutationError = AxiosError<unknown>;

export const usePostApiV1Author = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Author>>,
    TError,
    { data: NonReadonly<AuthorResource> },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Author>>,
  TError,
  { data: NonReadonly<AuthorResource> },
  TContext
> => {
  const mutationOptions = getPostApiV1AuthorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1AuthorId = (
  id: MaybeRef<string | undefined | null>,
  authorResource: MaybeRef<NonReadonly<AuthorResource>>,
  params?: MaybeRef<PutApiV1AuthorIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AuthorResource>> => {
  id = unref(id);
  authorResource = unref(authorResource);
  params = unref(params);
  return axios.put(
    `http://localhost:3001/api/v1/author/${id}`,
    authorResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPutApiV1AuthorIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AuthorId>>,
    TError,
    {
      id: string;
      data: NonReadonly<AuthorResource>;
      params?: PutApiV1AuthorIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1AuthorId>>,
  TError,
  {
    id: string;
    data: NonReadonly<AuthorResource>;
    params?: PutApiV1AuthorIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1AuthorId>>,
    {
      id: string;
      data: NonReadonly<AuthorResource>;
      params?: PutApiV1AuthorIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1AuthorId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1AuthorIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1AuthorId>>
>;
export type PutApiV1AuthorIdMutationBody = NonReadonly<AuthorResource>;
export type PutApiV1AuthorIdMutationError = AxiosError<unknown>;

export const usePutApiV1AuthorId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AuthorId>>,
    TError,
    {
      id: string;
      data: NonReadonly<AuthorResource>;
      params?: PutApiV1AuthorIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1AuthorId>>,
  TError,
  {
    id: string;
    data: NonReadonly<AuthorResource>;
    params?: PutApiV1AuthorIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV1AuthorIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1AuthorId = (
  id: MaybeRef<number | undefined | null>,
  params?: MaybeRef<DeleteApiV1AuthorIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  params = unref(params);
  return axios.delete(`http://localhost:3001/api/v1/author/${id}`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getDeleteApiV1AuthorIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1AuthorId>>,
    TError,
    { id: number; params?: DeleteApiV1AuthorIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1AuthorId>>,
  TError,
  { id: number; params?: DeleteApiV1AuthorIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1AuthorId>>,
    { id: number; params?: DeleteApiV1AuthorIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV1AuthorId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1AuthorIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1AuthorId>>
>;

export type DeleteApiV1AuthorIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1AuthorId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1AuthorId>>,
    TError,
    { id: number; params?: DeleteApiV1AuthorIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1AuthorId>>,
  TError,
  { id: number; params?: DeleteApiV1AuthorIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1AuthorIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1AuthorId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<AuthorResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/author/${id}`, options);
};

export const getGetApiV1AuthorIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'author', id] as const;
};

export const getGetApiV1AuthorIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1AuthorId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AuthorId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1AuthorIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1AuthorId>>
  > = ({ signal }) => getApiV1AuthorId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AuthorId>>,
    TError,
    TData
  >;
};

export type GetApiV1AuthorIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1AuthorId>>
>;
export type GetApiV1AuthorIdQueryError = AxiosError<unknown>;

export const useGetApiV1AuthorId = <
  TData = Awaited<ReturnType<typeof getApiV1AuthorId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AuthorId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1AuthorIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1AuthorEditor = (
  authorEditorResource: MaybeRef<AuthorEditorResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  authorEditorResource = unref(authorEditorResource);
  return axios.put(
    `http://localhost:3001/api/v1/author/editor`,
    authorEditorResource,
    options
  );
};

export const getPutApiV1AuthorEditorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AuthorEditor>>,
    TError,
    { data: AuthorEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1AuthorEditor>>,
  TError,
  { data: AuthorEditorResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1AuthorEditor>>,
    { data: AuthorEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1AuthorEditor(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1AuthorEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1AuthorEditor>>
>;
export type PutApiV1AuthorEditorMutationBody = AuthorEditorResource;
export type PutApiV1AuthorEditorMutationError = AxiosError<unknown>;

export const usePutApiV1AuthorEditor = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1AuthorEditor>>,
    TError,
    { data: AuthorEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1AuthorEditor>>,
  TError,
  { data: AuthorEditorResource },
  TContext
> => {
  const mutationOptions = getPutApiV1AuthorEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1AuthorEditor = (
  authorEditorResource: MaybeRef<AuthorEditorResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  authorEditorResource = unref(authorEditorResource);
  return axios.delete(`http://localhost:3001/api/v1/author/editor`, {
    data: authorEditorResource,
    ...options,
  });
};

export const getDeleteApiV1AuthorEditorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1AuthorEditor>>,
    TError,
    { data: AuthorEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1AuthorEditor>>,
  TError,
  { data: AuthorEditorResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1AuthorEditor>>,
    { data: AuthorEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1AuthorEditor(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1AuthorEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1AuthorEditor>>
>;
export type DeleteApiV1AuthorEditorMutationBody = AuthorEditorResource;
export type DeleteApiV1AuthorEditorMutationError = AxiosError<unknown>;

export const useDeleteApiV1AuthorEditor = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1AuthorEditor>>,
    TError,
    { data: AuthorEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1AuthorEditor>>,
  TError,
  { data: AuthorEditorResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1AuthorEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1AuthorLookup = (
  params?: MaybeRef<GetApiV1AuthorLookupParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/author/lookup`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1AuthorLookupQueryKey = (
  params?: MaybeRef<GetApiV1AuthorLookupParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'author',
    'lookup',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1AuthorLookupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1AuthorLookup>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1AuthorLookupParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AuthorLookup>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1AuthorLookupQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1AuthorLookup>>
  > = ({ signal }) => getApiV1AuthorLookup(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1AuthorLookup>>,
    TError,
    TData
  >;
};

export type GetApiV1AuthorLookupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1AuthorLookup>>
>;
export type GetApiV1AuthorLookupQueryError = AxiosError<unknown>;

export const useGetApiV1AuthorLookup = <
  TData = Awaited<ReturnType<typeof getApiV1AuthorLookup>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1AuthorLookupParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1AuthorLookup>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1AuthorLookupQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1SystemBackup = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BackupResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/system/backup`, options);
};

export const getGetApiV1SystemBackupQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'system', 'backup'] as const;
};

export const getGetApiV1SystemBackupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemBackup>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemBackup>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SystemBackupQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemBackup>>
  > = ({ signal }) => getApiV1SystemBackup({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemBackup>>,
    TError,
    TData
  >;
};

export type GetApiV1SystemBackupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemBackup>>
>;
export type GetApiV1SystemBackupQueryError = AxiosError<unknown>;

export const useGetApiV1SystemBackup = <
  TData = Awaited<ReturnType<typeof getApiV1SystemBackup>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemBackup>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SystemBackupQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1SystemBackupId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/system/backup/${id}`,
    options
  );
};

export const getDeleteApiV1SystemBackupIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1SystemBackupId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1SystemBackupIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>
>;

export type DeleteApiV1SystemBackupIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1SystemBackupId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1SystemBackupId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1SystemBackupIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1SystemBackupRestoreId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.post(
    `http://localhost:3001/api/v1/system/backup/restore/${id}`,
    undefined,
    options
  );
};

export const getPostApiV1SystemBackupRestoreIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV1SystemBackupRestoreId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemBackupRestoreIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>
>;

export type PostApiV1SystemBackupRestoreIdMutationError = AxiosError<unknown>;

export const usePostApiV1SystemBackupRestoreId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getPostApiV1SystemBackupRestoreIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1SystemBackupRestoreUpload = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/system/backup/restore/upload`,
    undefined,
    options
  );
};

export const getPostApiV1SystemBackupRestoreUploadMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
    void
  > = () => {
    return postApiV1SystemBackupRestoreUpload(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemBackupRestoreUploadMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>
>;

export type PostApiV1SystemBackupRestoreUploadMutationError =
  AxiosError<unknown>;

export const usePostApiV1SystemBackupRestoreUpload = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1SystemBackupRestoreUpload>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1SystemBackupRestoreUploadMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Blocklist = (
  params?: MaybeRef<GetApiV1BlocklistParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BlocklistResourcePagingResource>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/blocklist`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1BlocklistQueryKey = (
  params?: MaybeRef<GetApiV1BlocklistParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'blocklist',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1BlocklistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Blocklist>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BlocklistParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Blocklist>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1BlocklistQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Blocklist>>
  > = ({ signal }) => getApiV1Blocklist(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Blocklist>>,
    TError,
    TData
  >;
};

export type GetApiV1BlocklistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Blocklist>>
>;
export type GetApiV1BlocklistQueryError = AxiosError<unknown>;

export const useGetApiV1Blocklist = <
  TData = Awaited<ReturnType<typeof getApiV1Blocklist>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BlocklistParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Blocklist>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1BlocklistQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1BlocklistId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/blocklist/${id}`, options);
};

export const getDeleteApiV1BlocklistIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1BlocklistId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BlocklistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BlocklistId>>
>;

export type DeleteApiV1BlocklistIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1BlocklistId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1BlocklistId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BlocklistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1BlocklistBulk = (
  blocklistBulkResource: MaybeRef<BlocklistBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  blocklistBulkResource = unref(blocklistBulkResource);
  return axios.delete(`http://localhost:3001/api/v1/blocklist/bulk`, {
    data: blocklistBulkResource,
    ...options,
  });
};

export const getDeleteApiV1BlocklistBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
  TError,
  { data: BlocklistBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
    { data: BlocklistBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1BlocklistBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BlocklistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>
>;
export type DeleteApiV1BlocklistBulkMutationBody = BlocklistBulkResource;
export type DeleteApiV1BlocklistBulkMutationError = AxiosError<unknown>;

export const useDeleteApiV1BlocklistBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
    TError,
    { data: BlocklistBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1BlocklistBulk>>,
  TError,
  { data: BlocklistBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BlocklistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Book = (
  params?: MaybeRef<GetApiV1BookParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/book`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1BookQueryKey = (
  params?: MaybeRef<GetApiV1BookParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'book',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1BookQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Book>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BookParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Book>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1BookQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Book>>> = ({
    signal,
  }) => getApiV1Book(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Book>>,
    TError,
    TData
  >;
};

export type GetApiV1BookQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Book>>
>;
export type GetApiV1BookQueryError = AxiosError<unknown>;

export const useGetApiV1Book = <
  TData = Awaited<ReturnType<typeof getApiV1Book>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BookParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Book>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1BookQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Book = (
  bookResource: MaybeRef<BookResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource>> => {
  bookResource = unref(bookResource);
  return axios.post(`http://localhost:3001/api/v1/book`, bookResource, options);
};

export const getPostApiV1BookMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Book>>,
    TError,
    { data: BookResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Book>>,
  TError,
  { data: BookResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Book>>,
    { data: BookResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Book(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1BookMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Book>>
>;
export type PostApiV1BookMutationBody = BookResource;
export type PostApiV1BookMutationError = AxiosError<unknown>;

export const usePostApiV1Book = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Book>>,
    TError,
    { data: BookResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Book>>,
  TError,
  { data: BookResource },
  TContext
> => {
  const mutationOptions = getPostApiV1BookMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1BookIdOverview = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/book/${id}/overview`, options);
};

export const getGetApiV1BookIdOverviewQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'book',
    id,
    'overview',
  ] as const;
};

export const getGetApiV1BookIdOverviewQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1BookIdOverview>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1BookIdOverview>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1BookIdOverviewQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1BookIdOverview>>
  > = ({ signal }) => getApiV1BookIdOverview(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1BookIdOverview>>,
    TError,
    TData
  >;
};

export type GetApiV1BookIdOverviewQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1BookIdOverview>>
>;
export type GetApiV1BookIdOverviewQueryError = AxiosError<unknown>;

export const useGetApiV1BookIdOverview = <
  TData = Awaited<ReturnType<typeof getApiV1BookIdOverview>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1BookIdOverview>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1BookIdOverviewQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1BookId = (
  id: MaybeRef<string | undefined | null>,
  bookResource: MaybeRef<BookResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource>> => {
  id = unref(id);
  bookResource = unref(bookResource);
  return axios.put(
    `http://localhost:3001/api/v1/book/${id}`,
    bookResource,
    options
  );
};

export const getPutApiV1BookIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookId>>,
    TError,
    { id: string; data: BookResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1BookId>>,
  TError,
  { id: string; data: BookResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1BookId>>,
    { id: string; data: BookResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1BookId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1BookIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1BookId>>
>;
export type PutApiV1BookIdMutationBody = BookResource;
export type PutApiV1BookIdMutationError = AxiosError<unknown>;

export const usePutApiV1BookId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookId>>,
    TError,
    { id: string; data: BookResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1BookId>>,
  TError,
  { id: string; data: BookResource },
  TContext
> => {
  const mutationOptions = getPutApiV1BookIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1BookId = (
  id: MaybeRef<number | undefined | null>,
  params?: MaybeRef<DeleteApiV1BookIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  params = unref(params);
  return axios.delete(`http://localhost:3001/api/v1/book/${id}`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getDeleteApiV1BookIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookId>>,
    TError,
    { id: number; params?: DeleteApiV1BookIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BookId>>,
  TError,
  { id: number; params?: DeleteApiV1BookIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BookId>>,
    { id: number; params?: DeleteApiV1BookIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV1BookId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BookIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BookId>>
>;

export type DeleteApiV1BookIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1BookId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookId>>,
    TError,
    { id: number; params?: DeleteApiV1BookIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1BookId>>,
  TError,
  { id: number; params?: DeleteApiV1BookIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BookIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1BookId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/book/${id}`, options);
};

export const getGetApiV1BookIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'book', id] as const;
};

export const getGetApiV1BookIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1BookId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1BookId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1BookIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1BookId>>> = ({
    signal,
  }) => getApiV1BookId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1BookId>>,
    TError,
    TData
  >;
};

export type GetApiV1BookIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1BookId>>
>;
export type GetApiV1BookIdQueryError = AxiosError<unknown>;

export const useGetApiV1BookId = <
  TData = Awaited<ReturnType<typeof getApiV1BookId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1BookId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1BookIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1BookMonitor = (
  booksMonitoredResource: MaybeRef<BooksMonitoredResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  booksMonitoredResource = unref(booksMonitoredResource);
  return axios.put(
    `http://localhost:3001/api/v1/book/monitor`,
    booksMonitoredResource,
    options
  );
};

export const getPutApiV1BookMonitorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookMonitor>>,
    TError,
    { data: BooksMonitoredResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1BookMonitor>>,
  TError,
  { data: BooksMonitoredResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1BookMonitor>>,
    { data: BooksMonitoredResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1BookMonitor(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1BookMonitorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1BookMonitor>>
>;
export type PutApiV1BookMonitorMutationBody = BooksMonitoredResource;
export type PutApiV1BookMonitorMutationError = AxiosError<unknown>;

export const usePutApiV1BookMonitor = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookMonitor>>,
    TError,
    { data: BooksMonitoredResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1BookMonitor>>,
  TError,
  { data: BooksMonitoredResource },
  TContext
> => {
  const mutationOptions = getPutApiV1BookMonitorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1BookEditor = (
  bookEditorResource: MaybeRef<BookEditorResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  bookEditorResource = unref(bookEditorResource);
  return axios.put(
    `http://localhost:3001/api/v1/book/editor`,
    bookEditorResource,
    options
  );
};

export const getPutApiV1BookEditorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookEditor>>,
    TError,
    { data: BookEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1BookEditor>>,
  TError,
  { data: BookEditorResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1BookEditor>>,
    { data: BookEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1BookEditor(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1BookEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1BookEditor>>
>;
export type PutApiV1BookEditorMutationBody = BookEditorResource;
export type PutApiV1BookEditorMutationError = AxiosError<unknown>;

export const usePutApiV1BookEditor = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookEditor>>,
    TError,
    { data: BookEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1BookEditor>>,
  TError,
  { data: BookEditorResource },
  TContext
> => {
  const mutationOptions = getPutApiV1BookEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1BookEditor = (
  bookEditorResource: MaybeRef<BookEditorResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  bookEditorResource = unref(bookEditorResource);
  return axios.delete(`http://localhost:3001/api/v1/book/editor`, {
    data: bookEditorResource,
    ...options,
  });
};

export const getDeleteApiV1BookEditorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookEditor>>,
    TError,
    { data: BookEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BookEditor>>,
  TError,
  { data: BookEditorResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BookEditor>>,
    { data: BookEditorResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1BookEditor(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BookEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BookEditor>>
>;
export type DeleteApiV1BookEditorMutationBody = BookEditorResource;
export type DeleteApiV1BookEditorMutationError = AxiosError<unknown>;

export const useDeleteApiV1BookEditor = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookEditor>>,
    TError,
    { data: BookEditorResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1BookEditor>>,
  TError,
  { data: BookEditorResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BookEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Bookfile = (
  params?: MaybeRef<GetApiV1BookfileParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookFileResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/bookfile`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1BookfileQueryKey = (
  params?: MaybeRef<GetApiV1BookfileParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'bookfile',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1BookfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Bookfile>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BookfileParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Bookfile>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1BookfileQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Bookfile>>
  > = ({ signal }) => getApiV1Bookfile(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Bookfile>>,
    TError,
    TData
  >;
};

export type GetApiV1BookfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Bookfile>>
>;
export type GetApiV1BookfileQueryError = AxiosError<unknown>;

export const useGetApiV1Bookfile = <
  TData = Awaited<ReturnType<typeof getApiV1Bookfile>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BookfileParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Bookfile>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1BookfileQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1BookfileId = (
  id: MaybeRef<string | undefined | null>,
  bookFileResource: MaybeRef<BookFileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookFileResource>> => {
  id = unref(id);
  bookFileResource = unref(bookFileResource);
  return axios.put(
    `http://localhost:3001/api/v1/bookfile/${id}`,
    bookFileResource,
    options
  );
};

export const getPutApiV1BookfileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookfileId>>,
    TError,
    { id: string; data: BookFileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1BookfileId>>,
  TError,
  { id: string; data: BookFileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1BookfileId>>,
    { id: string; data: BookFileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1BookfileId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1BookfileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1BookfileId>>
>;
export type PutApiV1BookfileIdMutationBody = BookFileResource;
export type PutApiV1BookfileIdMutationError = AxiosError<unknown>;

export const usePutApiV1BookfileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookfileId>>,
    TError,
    { id: string; data: BookFileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1BookfileId>>,
  TError,
  { id: string; data: BookFileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1BookfileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1BookfileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/bookfile/${id}`, options);
};

export const getDeleteApiV1BookfileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookfileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BookfileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BookfileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1BookfileId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BookfileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BookfileId>>
>;

export type DeleteApiV1BookfileIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1BookfileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookfileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1BookfileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BookfileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1BookfileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookFileResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/bookfile/${id}`, options);
};

export const getGetApiV1BookfileIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'bookfile', id] as const;
};

export const getGetApiV1BookfileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1BookfileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1BookfileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1BookfileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1BookfileId>>
  > = ({ signal }) => getApiV1BookfileId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1BookfileId>>,
    TError,
    TData
  >;
};

export type GetApiV1BookfileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1BookfileId>>
>;
export type GetApiV1BookfileIdQueryError = AxiosError<unknown>;

export const useGetApiV1BookfileId = <
  TData = Awaited<ReturnType<typeof getApiV1BookfileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1BookfileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1BookfileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1BookfileEditor = (
  bookFileListResource: MaybeRef<BookFileListResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  bookFileListResource = unref(bookFileListResource);
  return axios.put(
    `http://localhost:3001/api/v1/bookfile/editor`,
    bookFileListResource,
    options
  );
};

export const getPutApiV1BookfileEditorMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookfileEditor>>,
    TError,
    { data: BookFileListResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1BookfileEditor>>,
  TError,
  { data: BookFileListResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1BookfileEditor>>,
    { data: BookFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1BookfileEditor(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1BookfileEditorMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1BookfileEditor>>
>;
export type PutApiV1BookfileEditorMutationBody = BookFileListResource;
export type PutApiV1BookfileEditorMutationError = AxiosError<unknown>;

export const usePutApiV1BookfileEditor = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1BookfileEditor>>,
    TError,
    { data: BookFileListResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1BookfileEditor>>,
  TError,
  { data: BookFileListResource },
  TContext
> => {
  const mutationOptions = getPutApiV1BookfileEditorMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1BookfileBulk = (
  bookFileListResource: MaybeRef<BookFileListResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  bookFileListResource = unref(bookFileListResource);
  return axios.delete(`http://localhost:3001/api/v1/bookfile/bulk`, {
    data: bookFileListResource,
    ...options,
  });
};

export const getDeleteApiV1BookfileBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookfileBulk>>,
    TError,
    { data: BookFileListResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1BookfileBulk>>,
  TError,
  { data: BookFileListResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1BookfileBulk>>,
    { data: BookFileListResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1BookfileBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1BookfileBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1BookfileBulk>>
>;
export type DeleteApiV1BookfileBulkMutationBody = BookFileListResource;
export type DeleteApiV1BookfileBulkMutationError = AxiosError<unknown>;

export const useDeleteApiV1BookfileBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1BookfileBulk>>,
    TError,
    { data: BookFileListResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1BookfileBulk>>,
  TError,
  { data: BookFileListResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1BookfileBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1BookLookup = (
  params?: MaybeRef<GetApiV1BookLookupParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/book/lookup`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1BookLookupQueryKey = (
  params?: MaybeRef<GetApiV1BookLookupParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'book',
    'lookup',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1BookLookupQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1BookLookup>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BookLookupParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1BookLookup>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1BookLookupQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1BookLookup>>
  > = ({ signal }) => getApiV1BookLookup(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1BookLookup>>,
    TError,
    TData
  >;
};

export type GetApiV1BookLookupQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1BookLookup>>
>;
export type GetApiV1BookLookupQueryError = AxiosError<unknown>;

export const useGetApiV1BookLookup = <
  TData = Awaited<ReturnType<typeof getApiV1BookLookup>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1BookLookupParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1BookLookup>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1BookLookupQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Bookshelf = (
  bookshelfResource: MaybeRef<BookshelfResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  bookshelfResource = unref(bookshelfResource);
  return axios.post(
    `http://localhost:3001/api/v1/bookshelf`,
    bookshelfResource,
    options
  );
};

export const getPostApiV1BookshelfMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Bookshelf>>,
    TError,
    { data: BookshelfResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Bookshelf>>,
  TError,
  { data: BookshelfResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Bookshelf>>,
    { data: BookshelfResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Bookshelf(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1BookshelfMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Bookshelf>>
>;
export type PostApiV1BookshelfMutationBody = BookshelfResource;
export type PostApiV1BookshelfMutationError = AxiosError<unknown>;

export const usePostApiV1Bookshelf = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Bookshelf>>,
    TError,
    { data: BookshelfResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Bookshelf>>,
  TError,
  { data: BookshelfResource },
  TContext
> => {
  const mutationOptions = getPostApiV1BookshelfMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Calendar = (
  params?: MaybeRef<GetApiV1CalendarParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/calendar`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1CalendarQueryKey = (
  params?: MaybeRef<GetApiV1CalendarParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'calendar',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1CalendarQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Calendar>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1CalendarParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Calendar>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CalendarQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Calendar>>
  > = ({ signal }) => getApiV1Calendar(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Calendar>>,
    TError,
    TData
  >;
};

export type GetApiV1CalendarQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Calendar>>
>;
export type GetApiV1CalendarQueryError = AxiosError<unknown>;

export const useGetApiV1Calendar = <
  TData = Awaited<ReturnType<typeof getApiV1Calendar>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1CalendarParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Calendar>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CalendarQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1CalendarId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/calendar/${id}`, options);
};

export const getGetApiV1CalendarIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'calendar', id] as const;
};

export const getGetApiV1CalendarIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CalendarId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CalendarId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CalendarIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CalendarId>>
  > = ({ signal }) => getApiV1CalendarId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CalendarId>>,
    TError,
    TData
  >;
};

export type GetApiV1CalendarIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CalendarId>>
>;
export type GetApiV1CalendarIdQueryError = AxiosError<unknown>;

export const useGetApiV1CalendarId = <
  TData = Awaited<ReturnType<typeof getApiV1CalendarId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CalendarId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CalendarIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getFeedV1CalendarReadarrIcs = (
  params?: MaybeRef<GetFeedV1CalendarReadarrIcsParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/feed/v1/calendar/readarr.ics`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetFeedV1CalendarReadarrIcsQueryKey = (
  params?: MaybeRef<GetFeedV1CalendarReadarrIcsParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'feed',
    'v1',
    'calendar',
    'readarr.ics',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetFeedV1CalendarReadarrIcsQueryOptions = <
  TData = Awaited<ReturnType<typeof getFeedV1CalendarReadarrIcs>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetFeedV1CalendarReadarrIcsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV1CalendarReadarrIcs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetFeedV1CalendarReadarrIcsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getFeedV1CalendarReadarrIcs>>
  > = ({ signal }) =>
    getFeedV1CalendarReadarrIcs(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getFeedV1CalendarReadarrIcs>>,
    TError,
    TData
  >;
};

export type GetFeedV1CalendarReadarrIcsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFeedV1CalendarReadarrIcs>>
>;
export type GetFeedV1CalendarReadarrIcsQueryError = AxiosError<unknown>;

export const useGetFeedV1CalendarReadarrIcs = <
  TData = Awaited<ReturnType<typeof getFeedV1CalendarReadarrIcs>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetFeedV1CalendarReadarrIcsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getFeedV1CalendarReadarrIcs>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetFeedV1CalendarReadarrIcsQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Command = (
  commandResource: MaybeRef<CommandResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CommandResource>> => {
  commandResource = unref(commandResource);
  return axios.post(
    `http://localhost:3001/api/v1/command`,
    commandResource,
    options
  );
};

export const getPostApiV1CommandMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Command>>,
    TError,
    { data: CommandResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Command>>,
  TError,
  { data: CommandResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Command>>,
    { data: CommandResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Command(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CommandMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Command>>
>;
export type PostApiV1CommandMutationBody = CommandResource;
export type PostApiV1CommandMutationError = AxiosError<unknown>;

export const usePostApiV1Command = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Command>>,
    TError,
    { data: CommandResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Command>>,
  TError,
  { data: CommandResource },
  TContext
> => {
  const mutationOptions = getPostApiV1CommandMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Command = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CommandResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/command`, options);
};

export const getGetApiV1CommandQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'command'] as const;
};

export const getGetApiV1CommandQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Command>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Command>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CommandQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Command>>> = ({
    signal,
  }) => getApiV1Command({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Command>>,
    TError,
    TData
  >;
};

export type GetApiV1CommandQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Command>>
>;
export type GetApiV1CommandQueryError = AxiosError<unknown>;

export const useGetApiV1Command = <
  TData = Awaited<ReturnType<typeof getApiV1Command>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Command>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CommandQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1CommandId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/command/${id}`, options);
};

export const getDeleteApiV1CommandIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CommandId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1CommandId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1CommandId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1CommandId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1CommandIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1CommandId>>
>;

export type DeleteApiV1CommandIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1CommandId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CommandId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1CommandId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1CommandIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1CommandId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CommandResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/command/${id}`, options);
};

export const getGetApiV1CommandIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'command', id] as const;
};

export const getGetApiV1CommandIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CommandId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommandId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CommandIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CommandId>>
  > = ({ signal }) => getApiV1CommandId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CommandId>>,
    TError,
    TData
  >;
};

export type GetApiV1CommandIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CommandId>>
>;
export type GetApiV1CommandIdQueryError = AxiosError<unknown>;

export const useGetApiV1CommandId = <
  TData = Awaited<ReturnType<typeof getApiV1CommandId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CommandId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CommandIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Customfilter = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFilterResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/customfilter`, options);
};

export const getGetApiV1CustomfilterQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'customfilter'] as const;
};

export const getGetApiV1CustomfilterQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Customfilter>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customfilter>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CustomfilterQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Customfilter>>
  > = ({ signal }) => getApiV1Customfilter({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Customfilter>>,
    TError,
    TData
  >;
};

export type GetApiV1CustomfilterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Customfilter>>
>;
export type GetApiV1CustomfilterQueryError = AxiosError<unknown>;

export const useGetApiV1Customfilter = <
  TData = Awaited<ReturnType<typeof getApiV1Customfilter>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customfilter>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CustomfilterQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Customfilter = (
  customFilterResource: MaybeRef<CustomFilterResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFilterResource>> => {
  customFilterResource = unref(customFilterResource);
  return axios.post(
    `http://localhost:3001/api/v1/customfilter`,
    customFilterResource,
    options
  );
};

export const getPostApiV1CustomfilterMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Customfilter>>,
  TError,
  { data: CustomFilterResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Customfilter>>,
    { data: CustomFilterResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Customfilter(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CustomfilterMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Customfilter>>
>;
export type PostApiV1CustomfilterMutationBody = CustomFilterResource;
export type PostApiV1CustomfilterMutationError = AxiosError<unknown>;

export const usePostApiV1Customfilter = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customfilter>>,
    TError,
    { data: CustomFilterResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Customfilter>>,
  TError,
  { data: CustomFilterResource },
  TContext
> => {
  const mutationOptions = getPostApiV1CustomfilterMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1CustomfilterId = (
  id: MaybeRef<string | undefined | null>,
  customFilterResource: MaybeRef<CustomFilterResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFilterResource>> => {
  id = unref(id);
  customFilterResource = unref(customFilterResource);
  return axios.put(
    `http://localhost:3001/api/v1/customfilter/${id}`,
    customFilterResource,
    options
  );
};

export const getPutApiV1CustomfilterIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
  TError,
  { id: string; data: CustomFilterResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
    { id: string; data: CustomFilterResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1CustomfilterId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1CustomfilterId>>
>;
export type PutApiV1CustomfilterIdMutationBody = CustomFilterResource;
export type PutApiV1CustomfilterIdMutationError = AxiosError<unknown>;

export const usePutApiV1CustomfilterId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
    TError,
    { id: string; data: CustomFilterResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1CustomfilterId>>,
  TError,
  { id: string; data: CustomFilterResource },
  TContext
> => {
  const mutationOptions = getPutApiV1CustomfilterIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1CustomfilterId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/customfilter/${id}`,
    options
  );
};

export const getDeleteApiV1CustomfilterIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1CustomfilterId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1CustomfilterIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>
>;

export type DeleteApiV1CustomfilterIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1CustomfilterId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1CustomfilterId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1CustomfilterIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1CustomfilterId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFilterResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/customfilter/${id}`, options);
};

export const getGetApiV1CustomfilterIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'customfilter', id] as const;
};

export const getGetApiV1CustomfilterIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CustomfilterIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CustomfilterId>>
  > = ({ signal }) => getApiV1CustomfilterId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
    TError,
    TData
  >;
};

export type GetApiV1CustomfilterIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CustomfilterId>>
>;
export type GetApiV1CustomfilterIdQueryError = AxiosError<unknown>;

export const useGetApiV1CustomfilterId = <
  TData = Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomfilterId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CustomfilterIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Customformat = (
  customFormatResource: MaybeRef<CustomFormatResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFormatResource>> => {
  customFormatResource = unref(customFormatResource);
  return axios.post(
    `http://localhost:3001/api/v1/customformat`,
    customFormatResource,
    options
  );
};

export const getPostApiV1CustomformatMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Customformat>>,
  TError,
  { data: CustomFormatResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Customformat>>,
    { data: CustomFormatResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Customformat(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1CustomformatMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Customformat>>
>;
export type PostApiV1CustomformatMutationBody = CustomFormatResource;
export type PostApiV1CustomformatMutationError = AxiosError<unknown>;

export const usePostApiV1Customformat = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Customformat>>,
    TError,
    { data: CustomFormatResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Customformat>>,
  TError,
  { data: CustomFormatResource },
  TContext
> => {
  const mutationOptions = getPostApiV1CustomformatMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Customformat = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFormatResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/customformat`, options);
};

export const getGetApiV1CustomformatQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'customformat'] as const;
};

export const getGetApiV1CustomformatQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Customformat>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customformat>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CustomformatQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Customformat>>
  > = ({ signal }) => getApiV1Customformat({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Customformat>>,
    TError,
    TData
  >;
};

export type GetApiV1CustomformatQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Customformat>>
>;
export type GetApiV1CustomformatQueryError = AxiosError<unknown>;

export const useGetApiV1Customformat = <
  TData = Awaited<ReturnType<typeof getApiV1Customformat>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Customformat>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CustomformatQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1CustomformatId = (
  id: MaybeRef<string | undefined | null>,
  customFormatResource: MaybeRef<CustomFormatResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFormatResource>> => {
  id = unref(id);
  customFormatResource = unref(customFormatResource);
  return axios.put(
    `http://localhost:3001/api/v1/customformat/${id}`,
    customFormatResource,
    options
  );
};

export const getPutApiV1CustomformatIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1CustomformatId>>,
  TError,
  { id: string; data: CustomFormatResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1CustomformatId>>,
    { id: string; data: CustomFormatResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1CustomformatId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1CustomformatId>>
>;
export type PutApiV1CustomformatIdMutationBody = CustomFormatResource;
export type PutApiV1CustomformatIdMutationError = AxiosError<unknown>;

export const usePutApiV1CustomformatId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1CustomformatId>>,
    TError,
    { id: string; data: CustomFormatResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1CustomformatId>>,
  TError,
  { id: string; data: CustomFormatResource },
  TContext
> => {
  const mutationOptions = getPutApiV1CustomformatIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1CustomformatId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/customformat/${id}`,
    options
  );
};

export const getDeleteApiV1CustomformatIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1CustomformatId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1CustomformatIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1CustomformatId>>
>;

export type DeleteApiV1CustomformatIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1CustomformatId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1CustomformatId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1CustomformatIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1CustomformatId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<CustomFormatResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/customformat/${id}`, options);
};

export const getGetApiV1CustomformatIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'customformat', id] as const;
};

export const getGetApiV1CustomformatIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CustomformatId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CustomformatIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CustomformatId>>
  > = ({ signal }) => getApiV1CustomformatId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CustomformatId>>,
    TError,
    TData
  >;
};

export type GetApiV1CustomformatIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CustomformatId>>
>;
export type GetApiV1CustomformatIdQueryError = AxiosError<unknown>;

export const useGetApiV1CustomformatId = <
  TData = Awaited<ReturnType<typeof getApiV1CustomformatId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1CustomformatId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CustomformatIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1CustomformatSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:3001/api/v1/customformat/schema`, options);
};

export const getGetApiV1CustomformatSchemaQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'customformat',
    'schema',
  ] as const;
};

export const getGetApiV1CustomformatSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1CustomformatSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1CustomformatSchema>>
  > = ({ signal }) => getApiV1CustomformatSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1CustomformatSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1CustomformatSchema>>
>;
export type GetApiV1CustomformatSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1CustomformatSchema = <
  TData = Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1CustomformatSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1CustomformatSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1WantedCutoff = (
  params?: MaybeRef<GetApiV1WantedCutoffParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResourcePagingResource>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/wanted/cutoff`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1WantedCutoffQueryKey = (
  params?: MaybeRef<GetApiV1WantedCutoffParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'wanted',
    'cutoff',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1WantedCutoffQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1WantedCutoffParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1WantedCutoffQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedCutoff>>
  > = ({ signal }) => getApiV1WantedCutoff(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
    TError,
    TData
  >;
};

export type GetApiV1WantedCutoffQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedCutoff>>
>;
export type GetApiV1WantedCutoffQueryError = AxiosError<unknown>;

export const useGetApiV1WantedCutoff = <
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1WantedCutoffParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoff>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1WantedCutoffQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1WantedCutoffId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/wanted/cutoff/${id}`, options);
};

export const getGetApiV1WantedCutoffIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'wanted',
    'cutoff',
    id,
  ] as const;
};

export const getGetApiV1WantedCutoffIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1WantedCutoffIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedCutoffId>>
  > = ({ signal }) => getApiV1WantedCutoffId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
    TError,
    TData
  >;
};

export type GetApiV1WantedCutoffIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedCutoffId>>
>;
export type GetApiV1WantedCutoffIdQueryError = AxiosError<unknown>;

export const useGetApiV1WantedCutoffId = <
  TData = Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedCutoffId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1WantedCutoffIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Delayprofile = (
  delayProfileResource: MaybeRef<DelayProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DelayProfileResource>> => {
  delayProfileResource = unref(delayProfileResource);
  return axios.post(
    `http://localhost:3001/api/v1/delayprofile`,
    delayProfileResource,
    options
  );
};

export const getPostApiV1DelayprofileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Delayprofile>>,
  TError,
  { data: DelayProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Delayprofile>>,
    { data: DelayProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Delayprofile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DelayprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Delayprofile>>
>;
export type PostApiV1DelayprofileMutationBody = DelayProfileResource;
export type PostApiV1DelayprofileMutationError = AxiosError<unknown>;

export const usePostApiV1Delayprofile = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Delayprofile>>,
    TError,
    { data: DelayProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Delayprofile>>,
  TError,
  { data: DelayProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1DelayprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Delayprofile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DelayProfileResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/delayprofile`, options);
};

export const getGetApiV1DelayprofileQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'delayprofile'] as const;
};

export const getGetApiV1DelayprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Delayprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Delayprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1DelayprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Delayprofile>>
  > = ({ signal }) => getApiV1Delayprofile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Delayprofile>>,
    TError,
    TData
  >;
};

export type GetApiV1DelayprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Delayprofile>>
>;
export type GetApiV1DelayprofileQueryError = AxiosError<unknown>;

export const useGetApiV1Delayprofile = <
  TData = Awaited<ReturnType<typeof getApiV1Delayprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Delayprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1DelayprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1DelayprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/delayprofile/${id}`,
    options
  );
};

export const getDeleteApiV1DelayprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1DelayprofileId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>
>;

export type DeleteApiV1DelayprofileIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1DelayprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1DelayprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1DelayprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1DelayprofileId = (
  id: MaybeRef<string | undefined | null>,
  delayProfileResource: MaybeRef<DelayProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DelayProfileResource>> => {
  id = unref(id);
  delayProfileResource = unref(delayProfileResource);
  return axios.put(
    `http://localhost:3001/api/v1/delayprofile/${id}`,
    delayProfileResource,
    options
  );
};

export const getPutApiV1DelayprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
  TError,
  { id: string; data: DelayProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
    { id: string; data: DelayProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1DelayprofileId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DelayprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DelayprofileId>>
>;
export type PutApiV1DelayprofileIdMutationBody = DelayProfileResource;
export type PutApiV1DelayprofileIdMutationError = AxiosError<unknown>;

export const usePutApiV1DelayprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
    TError,
    { id: string; data: DelayProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1DelayprofileId>>,
  TError,
  { id: string; data: DelayProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1DelayprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1DelayprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DelayProfileResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/delayprofile/${id}`, options);
};

export const getGetApiV1DelayprofileIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'delayprofile', id] as const;
};

export const getGetApiV1DelayprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1DelayprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1DelayprofileId>>
  > = ({ signal }) => getApiV1DelayprofileId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
    TError,
    TData
  >;
};

export type GetApiV1DelayprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1DelayprofileId>>
>;
export type GetApiV1DelayprofileIdQueryError = AxiosError<unknown>;

export const useGetApiV1DelayprofileId = <
  TData = Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DelayprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1DelayprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1DelayprofileReorderId = (
  id: MaybeRef<number | undefined | null>,
  params?: MaybeRef<PutApiV1DelayprofileReorderIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  params = unref(params);
  return axios.put(
    `http://localhost:3001/api/v1/delayprofile/reorder/${id}`,
    undefined,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPutApiV1DelayprofileReorderIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
    TError,
    { id: number; params?: PutApiV1DelayprofileReorderIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
  TError,
  { id: number; params?: PutApiV1DelayprofileReorderIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
    { id: number; params?: PutApiV1DelayprofileReorderIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return putApiV1DelayprofileReorderId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DelayprofileReorderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>
>;

export type PutApiV1DelayprofileReorderIdMutationError = AxiosError<unknown>;

export const usePutApiV1DelayprofileReorderId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
    TError,
    { id: number; params?: PutApiV1DelayprofileReorderIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1DelayprofileReorderId>>,
  TError,
  { id: number; params?: PutApiV1DelayprofileReorderIdParams },
  TContext
> => {
  const mutationOptions =
    getPutApiV1DelayprofileReorderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigDevelopment = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DevelopmentConfigResource>> => {
  return axios.get(`http://localhost:3001/api/v1/config/development`, options);
};

export const getGetApiV1ConfigDevelopmentQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'development',
  ] as const;
};

export const getGetApiV1ConfigDevelopmentQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDevelopment>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDevelopment>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigDevelopmentQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigDevelopment>>
  > = ({ signal }) => getApiV1ConfigDevelopment({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigDevelopment>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigDevelopmentQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigDevelopment>>
>;
export type GetApiV1ConfigDevelopmentQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigDevelopment = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDevelopment>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDevelopment>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigDevelopmentQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigDevelopmentId = (
  id: MaybeRef<string | undefined | null>,
  developmentConfigResource: MaybeRef<DevelopmentConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DevelopmentConfigResource>> => {
  id = unref(id);
  developmentConfigResource = unref(developmentConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/development/${id}`,
    developmentConfigResource,
    options
  );
};

export const getPutApiV1ConfigDevelopmentIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigDevelopmentId>>,
    TError,
    { id: string; data: DevelopmentConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigDevelopmentId>>,
  TError,
  { id: string; data: DevelopmentConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigDevelopmentId>>,
    { id: string; data: DevelopmentConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigDevelopmentId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigDevelopmentIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigDevelopmentId>>
>;
export type PutApiV1ConfigDevelopmentIdMutationBody = DevelopmentConfigResource;
export type PutApiV1ConfigDevelopmentIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigDevelopmentId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigDevelopmentId>>,
    TError,
    { id: string; data: DevelopmentConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigDevelopmentId>>,
  TError,
  { id: string; data: DevelopmentConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ConfigDevelopmentIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigDevelopmentId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DevelopmentConfigResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/config/development/${id}`,
    options
  );
};

export const getGetApiV1ConfigDevelopmentIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'development',
    id,
  ] as const;
};

export const getGetApiV1ConfigDevelopmentIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDevelopmentId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDevelopmentId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigDevelopmentIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigDevelopmentId>>
  > = ({ signal }) =>
    getApiV1ConfigDevelopmentId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigDevelopmentId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigDevelopmentIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigDevelopmentId>>
>;
export type GetApiV1ConfigDevelopmentIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigDevelopmentId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDevelopmentId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDevelopmentId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigDevelopmentIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Diskspace = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DiskSpaceResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/diskspace`, options);
};

export const getGetApiV1DiskspaceQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'diskspace'] as const;
};

export const getGetApiV1DiskspaceQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Diskspace>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Diskspace>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1DiskspaceQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Diskspace>>
  > = ({ signal }) => getApiV1Diskspace({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Diskspace>>,
    TError,
    TData
  >;
};

export type GetApiV1DiskspaceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Diskspace>>
>;
export type GetApiV1DiskspaceQueryError = AxiosError<unknown>;

export const useGetApiV1Diskspace = <
  TData = Awaited<ReturnType<typeof getApiV1Diskspace>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Diskspace>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1DiskspaceQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Downloadclient = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/downloadclient`, options);
};

export const getGetApiV1DownloadclientQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'downloadclient'] as const;
};

export const getGetApiV1DownloadclientQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Downloadclient>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Downloadclient>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1DownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Downloadclient>>
  > = ({ signal }) => getApiV1Downloadclient({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Downloadclient>>,
    TError,
    TData
  >;
};

export type GetApiV1DownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Downloadclient>>
>;
export type GetApiV1DownloadclientQueryError = AxiosError<unknown>;

export const useGetApiV1Downloadclient = <
  TData = Awaited<ReturnType<typeof getApiV1Downloadclient>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Downloadclient>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1DownloadclientQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Downloadclient = (
  downloadClientResource: MaybeRef<DownloadClientResource>,
  params?: MaybeRef<PostApiV1DownloadclientParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientResource>> => {
  downloadClientResource = unref(downloadClientResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient`,
    downloadClientResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1DownloadclientMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Downloadclient>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Downloadclient>>,
    { data: DownloadClientResource; params?: PostApiV1DownloadclientParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Downloadclient(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Downloadclient>>
>;
export type PostApiV1DownloadclientMutationBody = DownloadClientResource;
export type PostApiV1DownloadclientMutationError = AxiosError<unknown>;

export const usePostApiV1Downloadclient = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Downloadclient>>,
    TError,
    { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Downloadclient>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV1DownloadclientParams },
  TContext
> => {
  const mutationOptions = getPostApiV1DownloadclientMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1DownloadclientId = (
  id: MaybeRef<string | undefined | null>,
  downloadClientResource: MaybeRef<DownloadClientResource>,
  params?: MaybeRef<PutApiV1DownloadclientIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientResource>> => {
  id = unref(id);
  downloadClientResource = unref(downloadClientResource);
  params = unref(params);
  return axios.put(
    `http://localhost:3001/api/v1/downloadclient/${id}`,
    downloadClientResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPutApiV1DownloadclientIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV1DownloadclientIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
  TError,
  {
    id: string;
    data: DownloadClientResource;
    params?: PutApiV1DownloadclientIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV1DownloadclientIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1DownloadclientId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DownloadclientId>>
>;
export type PutApiV1DownloadclientIdMutationBody = DownloadClientResource;
export type PutApiV1DownloadclientIdMutationError = AxiosError<unknown>;

export const usePutApiV1DownloadclientId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
    TError,
    {
      id: string;
      data: DownloadClientResource;
      params?: PutApiV1DownloadclientIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1DownloadclientId>>,
  TError,
  {
    id: string;
    data: DownloadClientResource;
    params?: PutApiV1DownloadclientIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV1DownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1DownloadclientId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/downloadclient/${id}`,
    options
  );
};

export const getDeleteApiV1DownloadclientIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1DownloadclientId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1DownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>
>;

export type DeleteApiV1DownloadclientIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1DownloadclientId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1DownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1DownloadclientId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/downloadclient/${id}`,
    options
  );
};

export const getGetApiV1DownloadclientIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'downloadclient',
    id,
  ] as const;
};

export const getGetApiV1DownloadclientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1DownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1DownloadclientId>>
  > = ({ signal }) => getApiV1DownloadclientId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
    TError,
    TData
  >;
};

export type GetApiV1DownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1DownloadclientId>>
>;
export type GetApiV1DownloadclientIdQueryError = AxiosError<unknown>;

export const useGetApiV1DownloadclientId = <
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1DownloadclientId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1DownloadclientIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1DownloadclientBulk = (
  downloadClientBulkResource: MaybeRef<DownloadClientBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientResource>> => {
  downloadClientBulkResource = unref(downloadClientBulkResource);
  return axios.put(
    `http://localhost:3001/api/v1/downloadclient/bulk`,
    downloadClientBulkResource,
    options
  );
};

export const getPutApiV1DownloadclientBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1DownloadclientBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>
>;
export type PutApiV1DownloadclientBulkMutationBody = DownloadClientBulkResource;
export type PutApiV1DownloadclientBulkMutationError = AxiosError<unknown>;

export const usePutApiV1DownloadclientBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV1DownloadclientBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1DownloadclientBulk = (
  downloadClientBulkResource: MaybeRef<DownloadClientBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  downloadClientBulkResource = unref(downloadClientBulkResource);
  return axios.delete(`http://localhost:3001/api/v1/downloadclient/bulk`, {
    data: downloadClientBulkResource,
    ...options,
  });
};

export const getDeleteApiV1DownloadclientBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
    { data: DownloadClientBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1DownloadclientBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1DownloadclientBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>
>;
export type DeleteApiV1DownloadclientBulkMutationBody =
  DownloadClientBulkResource;
export type DeleteApiV1DownloadclientBulkMutationError = AxiosError<unknown>;

export const useDeleteApiV1DownloadclientBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
    TError,
    { data: DownloadClientBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1DownloadclientBulk>>,
  TError,
  { data: DownloadClientBulkResource },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1DownloadclientBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1DownloadclientSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientResource[]>> => {
  return axios.get(
    `http://localhost:3001/api/v1/downloadclient/schema`,
    options
  );
};

export const getGetApiV1DownloadclientSchemaQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'downloadclient',
    'schema',
  ] as const;
};

export const getGetApiV1DownloadclientSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1DownloadclientSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>
  > = ({ signal }) => getApiV1DownloadclientSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1DownloadclientSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>
>;
export type GetApiV1DownloadclientSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1DownloadclientSchema = <
  TData = Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1DownloadclientSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1DownloadclientSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1DownloadclientTest = (
  downloadClientResource: MaybeRef<DownloadClientResource>,
  params?: MaybeRef<PostApiV1DownloadclientTestParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  downloadClientResource = unref(downloadClientResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient/test`,
    downloadClientResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1DownloadclientTestMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
    TError,
    {
      data: DownloadClientResource;
      params?: PostApiV1DownloadclientTestParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV1DownloadclientTestParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
    { data: DownloadClientResource; params?: PostApiV1DownloadclientTestParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1DownloadclientTest(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1DownloadclientTest>>
>;
export type PostApiV1DownloadclientTestMutationBody = DownloadClientResource;
export type PostApiV1DownloadclientTestMutationError = AxiosError<unknown>;

export const usePostApiV1DownloadclientTest = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
    TError,
    {
      data: DownloadClientResource;
      params?: PostApiV1DownloadclientTestParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1DownloadclientTest>>,
  TError,
  { data: DownloadClientResource; params?: PostApiV1DownloadclientTestParams },
  TContext
> => {
  const mutationOptions =
    getPostApiV1DownloadclientTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1DownloadclientTestall = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient/testall`,
    undefined,
    options
  );
};

export const getPostApiV1DownloadclientTestallMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
    void
  > = () => {
    return postApiV1DownloadclientTestall(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>
>;

export type PostApiV1DownloadclientTestallMutationError = AxiosError<unknown>;

export const usePostApiV1DownloadclientTestall = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1DownloadclientTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1DownloadclientTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1DownloadclientActionName = (
  name: MaybeRef<string | undefined | null>,
  downloadClientResource: MaybeRef<DownloadClientResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  name = unref(name);
  downloadClientResource = unref(downloadClientResource);
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient/action/${name}`,
    downloadClientResource,
    options
  );
};

export const getPostApiV1DownloadclientActionNameMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
  TError,
  { name: string; data: DownloadClientResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
    { name: string; data: DownloadClientResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1DownloadclientActionName(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1DownloadclientActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>
>;
export type PostApiV1DownloadclientActionNameMutationBody =
  DownloadClientResource;
export type PostApiV1DownloadclientActionNameMutationError =
  AxiosError<unknown>;

export const usePostApiV1DownloadclientActionName = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
    TError,
    { name: string; data: DownloadClientResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1DownloadclientActionName>>,
  TError,
  { name: string; data: DownloadClientResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1DownloadclientActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigDownloadclient = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientConfigResource>> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/downloadclient`,
    options
  );
};

export const getGetApiV1ConfigDownloadclientQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'downloadclient',
  ] as const;
};

export const getGetApiV1ConfigDownloadclientQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigDownloadclientQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>
  > = ({ signal }) => getApiV1ConfigDownloadclient({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigDownloadclientQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>
>;
export type GetApiV1ConfigDownloadclientQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigDownloadclient = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigDownloadclient>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigDownloadclientQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigDownloadclientId = (
  id: MaybeRef<string | undefined | null>,
  downloadClientConfigResource: MaybeRef<DownloadClientConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientConfigResource>> => {
  id = unref(id);
  downloadClientConfigResource = unref(downloadClientConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/downloadclient/${id}`,
    downloadClientConfigResource,
    options
  );
};

export const getPutApiV1ConfigDownloadclientIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
  TError,
  { id: string; data: DownloadClientConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
    { id: string; data: DownloadClientConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigDownloadclientId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigDownloadclientIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>
>;
export type PutApiV1ConfigDownloadclientIdMutationBody =
  DownloadClientConfigResource;
export type PutApiV1ConfigDownloadclientIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigDownloadclientId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
    TError,
    { id: string; data: DownloadClientConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigDownloadclientId>>,
  TError,
  { id: string; data: DownloadClientConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ConfigDownloadclientIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigDownloadclientId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DownloadClientConfigResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/config/downloadclient/${id}`,
    options
  );
};

export const getGetApiV1ConfigDownloadclientIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'downloadclient',
    id,
  ] as const;
};

export const getGetApiV1ConfigDownloadclientIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigDownloadclientIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>
  > = ({ signal }) =>
    getApiV1ConfigDownloadclientId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigDownloadclientIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>
>;
export type GetApiV1ConfigDownloadclientIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigDownloadclientId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigDownloadclientId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigDownloadclientIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Edition = (
  params?: MaybeRef<GetApiV1EditionParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<EditionResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/edition`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1EditionQueryKey = (
  params?: MaybeRef<GetApiV1EditionParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'edition',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1EditionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Edition>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1EditionParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Edition>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1EditionQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Edition>>> = ({
    signal,
  }) => getApiV1Edition(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Edition>>,
    TError,
    TData
  >;
};

export type GetApiV1EditionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Edition>>
>;
export type GetApiV1EditionQueryError = AxiosError<unknown>;

export const useGetApiV1Edition = <
  TData = Awaited<ReturnType<typeof getApiV1Edition>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1EditionParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Edition>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1EditionQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Filesystem = (
  params?: MaybeRef<GetApiV1FilesystemParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/filesystem`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1FilesystemQueryKey = (
  params?: MaybeRef<GetApiV1FilesystemParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'filesystem',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FilesystemQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Filesystem>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1FilesystemParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Filesystem>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1FilesystemQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Filesystem>>
  > = ({ signal }) => getApiV1Filesystem(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Filesystem>>,
    TError,
    TData
  >;
};

export type GetApiV1FilesystemQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Filesystem>>
>;
export type GetApiV1FilesystemQueryError = AxiosError<unknown>;

export const useGetApiV1Filesystem = <
  TData = Awaited<ReturnType<typeof getApiV1Filesystem>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1FilesystemParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Filesystem>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FilesystemQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1FilesystemType = (
  params?: MaybeRef<GetApiV1FilesystemTypeParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/filesystem/type`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1FilesystemTypeQueryKey = (
  params?: MaybeRef<GetApiV1FilesystemTypeParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'filesystem',
    'type',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FilesystemTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FilesystemType>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1FilesystemTypeParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemType>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1FilesystemTypeQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FilesystemType>>
  > = ({ signal }) =>
    getApiV1FilesystemType(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FilesystemType>>,
    TError,
    TData
  >;
};

export type GetApiV1FilesystemTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FilesystemType>>
>;
export type GetApiV1FilesystemTypeQueryError = AxiosError<unknown>;

export const useGetApiV1FilesystemType = <
  TData = Awaited<ReturnType<typeof getApiV1FilesystemType>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1FilesystemTypeParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemType>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FilesystemTypeQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1FilesystemMediafiles = (
  params?: MaybeRef<GetApiV1FilesystemMediafilesParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/filesystem/mediafiles`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1FilesystemMediafilesQueryKey = (
  params?: MaybeRef<GetApiV1FilesystemMediafilesParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'filesystem',
    'mediafiles',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1FilesystemMediafilesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1FilesystemMediafilesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1FilesystemMediafilesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>
  > = ({ signal }) =>
    getApiV1FilesystemMediafiles(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
    TError,
    TData
  >;
};

export type GetApiV1FilesystemMediafilesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>
>;
export type GetApiV1FilesystemMediafilesQueryError = AxiosError<unknown>;

export const useGetApiV1FilesystemMediafiles = <
  TData = Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1FilesystemMediafilesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1FilesystemMediafiles>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1FilesystemMediafilesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Health = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HealthResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/health`, options);
};

export const getGetApiV1HealthQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'health'] as const;
};

export const getGetApiV1HealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Health>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Health>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1HealthQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Health>>> = ({
    signal,
  }) => getApiV1Health({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Health>>,
    TError,
    TData
  >;
};

export type GetApiV1HealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Health>>
>;
export type GetApiV1HealthQueryError = AxiosError<unknown>;

export const useGetApiV1Health = <
  TData = Awaited<ReturnType<typeof getApiV1Health>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Health>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1HealthQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1History = (
  params?: MaybeRef<GetApiV1HistoryParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HistoryResourcePagingResource>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/history`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1HistoryQueryKey = (
  params?: MaybeRef<GetApiV1HistoryParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'history',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1HistoryQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1History>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1HistoryParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1History>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1HistoryQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1History>>> = ({
    signal,
  }) => getApiV1History(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1History>>,
    TError,
    TData
  >;
};

export type GetApiV1HistoryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1History>>
>;
export type GetApiV1HistoryQueryError = AxiosError<unknown>;

export const useGetApiV1History = <
  TData = Awaited<ReturnType<typeof getApiV1History>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1HistoryParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1History>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1HistoryQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1HistorySince = (
  params?: MaybeRef<GetApiV1HistorySinceParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HistoryResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/history/since`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1HistorySinceQueryKey = (
  params?: MaybeRef<GetApiV1HistorySinceParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'history',
    'since',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1HistorySinceQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1HistorySince>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1HistorySinceParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistorySince>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1HistorySinceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1HistorySince>>
  > = ({ signal }) => getApiV1HistorySince(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1HistorySince>>,
    TError,
    TData
  >;
};

export type GetApiV1HistorySinceQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1HistorySince>>
>;
export type GetApiV1HistorySinceQueryError = AxiosError<unknown>;

export const useGetApiV1HistorySince = <
  TData = Awaited<ReturnType<typeof getApiV1HistorySince>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1HistorySinceParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistorySince>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1HistorySinceQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1HistoryAuthor = (
  params?: MaybeRef<GetApiV1HistoryAuthorParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HistoryResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/history/author`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1HistoryAuthorQueryKey = (
  params?: MaybeRef<GetApiV1HistoryAuthorParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'history',
    'author',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1HistoryAuthorQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1HistoryAuthor>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1HistoryAuthorParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistoryAuthor>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1HistoryAuthorQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1HistoryAuthor>>
  > = ({ signal }) =>
    getApiV1HistoryAuthor(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1HistoryAuthor>>,
    TError,
    TData
  >;
};

export type GetApiV1HistoryAuthorQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1HistoryAuthor>>
>;
export type GetApiV1HistoryAuthorQueryError = AxiosError<unknown>;

export const useGetApiV1HistoryAuthor = <
  TData = Awaited<ReturnType<typeof getApiV1HistoryAuthor>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1HistoryAuthorParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1HistoryAuthor>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1HistoryAuthorQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1HistoryFailedId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.post(
    `http://localhost:3001/api/v1/history/failed/${id}`,
    undefined,
    options
  );
};

export const getPostApiV1HistoryFailedIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV1HistoryFailedId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1HistoryFailedIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1HistoryFailedId>>
>;

export type PostApiV1HistoryFailedIdMutationError = AxiosError<unknown>;

export const usePostApiV1HistoryFailedId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1HistoryFailedId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostApiV1HistoryFailedIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigHost = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HostConfigResource>> => {
  return axios.get(`http://localhost:3001/api/v1/config/host`, options);
};

export const getGetApiV1ConfigHostQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'config', 'host'] as const;
};

export const getGetApiV1ConfigHostQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigHost>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigHost>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigHostQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigHost>>
  > = ({ signal }) => getApiV1ConfigHost({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigHost>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigHostQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigHost>>
>;
export type GetApiV1ConfigHostQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigHost = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigHost>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigHost>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigHostQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigHostId = (
  id: MaybeRef<string | undefined | null>,
  hostConfigResource: MaybeRef<HostConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HostConfigResource>> => {
  id = unref(id);
  hostConfigResource = unref(hostConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/host/${id}`,
    hostConfigResource,
    options
  );
};

export const getPutApiV1ConfigHostIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
  TError,
  { id: string; data: HostConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
    { id: string; data: HostConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigHostId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigHostIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigHostId>>
>;
export type PutApiV1ConfigHostIdMutationBody = HostConfigResource;
export type PutApiV1ConfigHostIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigHostId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
    TError,
    { id: string; data: HostConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigHostId>>,
  TError,
  { id: string; data: HostConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigHostIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigHostId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<HostConfigResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/config/host/${id}`, options);
};

export const getGetApiV1ConfigHostIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'host',
    id,
  ] as const;
};

export const getGetApiV1ConfigHostIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigHostIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigHostId>>
  > = ({ signal }) => getApiV1ConfigHostId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigHostIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigHostId>>
>;
export type GetApiV1ConfigHostIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigHostId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigHostId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigHostIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Importlist = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/importlist`, options);
};

export const getGetApiV1ImportlistQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'importlist'] as const;
};

export const getGetApiV1ImportlistQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Importlist>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlist>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ImportlistQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Importlist>>
  > = ({ signal }) => getApiV1Importlist({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Importlist>>,
    TError,
    TData
  >;
};

export type GetApiV1ImportlistQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Importlist>>
>;
export type GetApiV1ImportlistQueryError = AxiosError<unknown>;

export const useGetApiV1Importlist = <
  TData = Awaited<ReturnType<typeof getApiV1Importlist>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlist>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ImportlistQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Importlist = (
  importListResource: MaybeRef<ImportListResource>,
  params?: MaybeRef<PostApiV1ImportlistParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListResource>> => {
  importListResource = unref(importListResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/importlist`,
    importListResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1ImportlistMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV1ImportlistParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Importlist>>,
  TError,
  { data: ImportListResource; params?: PostApiV1ImportlistParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Importlist>>,
    { data: ImportListResource; params?: PostApiV1ImportlistParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Importlist(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Importlist>>
>;
export type PostApiV1ImportlistMutationBody = ImportListResource;
export type PostApiV1ImportlistMutationError = AxiosError<unknown>;

export const usePostApiV1Importlist = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlist>>,
    TError,
    { data: ImportListResource; params?: PostApiV1ImportlistParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Importlist>>,
  TError,
  { data: ImportListResource; params?: PostApiV1ImportlistParams },
  TContext
> => {
  const mutationOptions = getPostApiV1ImportlistMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1ImportlistId = (
  id: MaybeRef<string | undefined | null>,
  importListResource: MaybeRef<ImportListResource>,
  params?: MaybeRef<PutApiV1ImportlistIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListResource>> => {
  id = unref(id);
  importListResource = unref(importListResource);
  params = unref(params);
  return axios.put(
    `http://localhost:3001/api/v1/importlist/${id}`,
    importListResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPutApiV1ImportlistIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV1ImportlistIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ImportlistId>>,
  TError,
  { id: string; data: ImportListResource; params?: PutApiV1ImportlistIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ImportlistId>>,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV1ImportlistIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1ImportlistId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ImportlistId>>
>;
export type PutApiV1ImportlistIdMutationBody = ImportListResource;
export type PutApiV1ImportlistIdMutationError = AxiosError<unknown>;

export const usePutApiV1ImportlistId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistId>>,
    TError,
    {
      id: string;
      data: ImportListResource;
      params?: PutApiV1ImportlistIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ImportlistId>>,
  TError,
  { id: string; data: ImportListResource; params?: PutApiV1ImportlistIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV1ImportlistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ImportlistId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/importlist/${id}`, options);
};

export const getDeleteApiV1ImportlistIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1ImportlistId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ImportlistIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ImportlistId>>
>;

export type DeleteApiV1ImportlistIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1ImportlistId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1ImportlistId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ImportlistIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ImportlistId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/importlist/${id}`, options);
};

export const getGetApiV1ImportlistIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'importlist', id] as const;
};

export const getGetApiV1ImportlistIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ImportlistIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ImportlistId>>
  > = ({ signal }) => getApiV1ImportlistId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ImportlistId>>,
    TError,
    TData
  >;
};

export type GetApiV1ImportlistIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ImportlistId>>
>;
export type GetApiV1ImportlistIdQueryError = AxiosError<unknown>;

export const useGetApiV1ImportlistId = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ImportlistIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ImportlistBulk = (
  importListBulkResource: MaybeRef<ImportListBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListResource>> => {
  importListBulkResource = unref(importListBulkResource);
  return axios.put(
    `http://localhost:3001/api/v1/importlist/bulk`,
    importListBulkResource,
    options
  );
};

export const getPutApiV1ImportlistBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1ImportlistBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ImportlistBulk>>
>;
export type PutApiV1ImportlistBulkMutationBody = ImportListBulkResource;
export type PutApiV1ImportlistBulkMutationError = AxiosError<unknown>;

export const usePutApiV1ImportlistBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ImportlistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ImportlistBulk = (
  importListBulkResource: MaybeRef<ImportListBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  importListBulkResource = unref(importListBulkResource);
  return axios.delete(`http://localhost:3001/api/v1/importlist/bulk`, {
    data: importListBulkResource,
    ...options,
  });
};

export const getDeleteApiV1ImportlistBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
    { data: ImportListBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1ImportlistBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ImportlistBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>
>;
export type DeleteApiV1ImportlistBulkMutationBody = ImportListBulkResource;
export type DeleteApiV1ImportlistBulkMutationError = AxiosError<unknown>;

export const useDeleteApiV1ImportlistBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
    TError,
    { data: ImportListBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1ImportlistBulk>>,
  TError,
  { data: ImportListBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1ImportlistBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ImportlistSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/importlist/schema`, options);
};

export const getGetApiV1ImportlistSchemaQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'importlist',
    'schema',
  ] as const;
};

export const getGetApiV1ImportlistSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ImportlistSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ImportlistSchema>>
  > = ({ signal }) => getApiV1ImportlistSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1ImportlistSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ImportlistSchema>>
>;
export type GetApiV1ImportlistSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1ImportlistSchema = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ImportlistSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ImportlistSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1ImportlistTest = (
  importListResource: MaybeRef<ImportListResource>,
  params?: MaybeRef<PostApiV1ImportlistTestParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  importListResource = unref(importListResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/importlist/test`,
    importListResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1ImportlistTestMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
    TError,
    { data: ImportListResource; params?: PostApiV1ImportlistTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
  TError,
  { data: ImportListResource; params?: PostApiV1ImportlistTestParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
    { data: ImportListResource; params?: PostApiV1ImportlistTestParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1ImportlistTest(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ImportlistTest>>
>;
export type PostApiV1ImportlistTestMutationBody = ImportListResource;
export type PostApiV1ImportlistTestMutationError = AxiosError<unknown>;

export const usePostApiV1ImportlistTest = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
    TError,
    { data: ImportListResource; params?: PostApiV1ImportlistTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1ImportlistTest>>,
  TError,
  { data: ImportListResource; params?: PostApiV1ImportlistTestParams },
  TContext
> => {
  const mutationOptions = getPostApiV1ImportlistTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1ImportlistTestall = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/importlist/testall`,
    undefined,
    options
  );
};

export const getPostApiV1ImportlistTestallMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
    void
  > = () => {
    return postApiV1ImportlistTestall(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ImportlistTestall>>
>;

export type PostApiV1ImportlistTestallMutationError = AxiosError<unknown>;

export const usePostApiV1ImportlistTestall = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1ImportlistTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1ImportlistTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1ImportlistActionName = (
  name: MaybeRef<string | undefined | null>,
  importListResource: MaybeRef<ImportListResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  name = unref(name);
  importListResource = unref(importListResource);
  return axios.post(
    `http://localhost:3001/api/v1/importlist/action/${name}`,
    importListResource,
    options
  );
};

export const getPostApiV1ImportlistActionNameMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
  TError,
  { name: string; data: ImportListResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
    { name: string; data: ImportListResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1ImportlistActionName(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ImportlistActionName>>
>;
export type PostApiV1ImportlistActionNameMutationBody = ImportListResource;
export type PostApiV1ImportlistActionNameMutationError = AxiosError<unknown>;

export const usePostApiV1ImportlistActionName = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
    TError,
    { name: string; data: ImportListResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1ImportlistActionName>>,
  TError,
  { name: string; data: ImportListResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1ImportlistActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Importlistexclusion = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListExclusionResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/importlistexclusion`, options);
};

export const getGetApiV1ImportlistexclusionQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'importlistexclusion',
  ] as const;
};

export const getGetApiV1ImportlistexclusionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ImportlistexclusionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Importlistexclusion>>
  > = ({ signal }) => getApiV1Importlistexclusion({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
    TError,
    TData
  >;
};

export type GetApiV1ImportlistexclusionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Importlistexclusion>>
>;
export type GetApiV1ImportlistexclusionQueryError = AxiosError<unknown>;

export const useGetApiV1Importlistexclusion = <
  TData = Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Importlistexclusion>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ImportlistexclusionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Importlistexclusion = (
  importListExclusionResource: MaybeRef<ImportListExclusionResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListExclusionResource>> => {
  importListExclusionResource = unref(importListExclusionResource);
  return axios.post(
    `http://localhost:3001/api/v1/importlistexclusion`,
    importListExclusionResource,
    options
  );
};

export const getPostApiV1ImportlistexclusionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
    TError,
    { data: ImportListExclusionResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
  TError,
  { data: ImportListExclusionResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
    { data: ImportListExclusionResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Importlistexclusion(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ImportlistexclusionMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Importlistexclusion>>
>;
export type PostApiV1ImportlistexclusionMutationBody =
  ImportListExclusionResource;
export type PostApiV1ImportlistexclusionMutationError = AxiosError<unknown>;

export const usePostApiV1Importlistexclusion = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
    TError,
    { data: ImportListExclusionResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Importlistexclusion>>,
  TError,
  { data: ImportListExclusionResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1ImportlistexclusionMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1ImportlistexclusionId = (
  id: MaybeRef<string | undefined | null>,
  importListExclusionResource: MaybeRef<ImportListExclusionResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListExclusionResource>> => {
  id = unref(id);
  importListExclusionResource = unref(importListExclusionResource);
  return axios.put(
    `http://localhost:3001/api/v1/importlistexclusion/${id}`,
    importListExclusionResource,
    options
  );
};

export const getPutApiV1ImportlistexclusionIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
    TError,
    { id: string; data: ImportListExclusionResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
  TError,
  { id: string; data: ImportListExclusionResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
    { id: string; data: ImportListExclusionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ImportlistexclusionId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ImportlistexclusionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>
>;
export type PutApiV1ImportlistexclusionIdMutationBody =
  ImportListExclusionResource;
export type PutApiV1ImportlistexclusionIdMutationError = AxiosError<unknown>;

export const usePutApiV1ImportlistexclusionId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
    TError,
    { id: string; data: ImportListExclusionResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ImportlistexclusionId>>,
  TError,
  { id: string; data: ImportListExclusionResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ImportlistexclusionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ImportlistexclusionId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/importlistexclusion/${id}`,
    options
  );
};

export const getDeleteApiV1ImportlistexclusionIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1ImportlistexclusionId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ImportlistexclusionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>
>;

export type DeleteApiV1ImportlistexclusionIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1ImportlistexclusionId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1ImportlistexclusionId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1ImportlistexclusionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ImportlistexclusionId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ImportListExclusionResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/importlistexclusion/${id}`,
    options
  );
};

export const getGetApiV1ImportlistexclusionIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'importlistexclusion',
    id,
  ] as const;
};

export const getGetApiV1ImportlistexclusionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ImportlistexclusionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>
  > = ({ signal }) =>
    getApiV1ImportlistexclusionId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
    TError,
    TData
  >;
};

export type GetApiV1ImportlistexclusionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>
>;
export type GetApiV1ImportlistexclusionIdQueryError = AxiosError<unknown>;

export const useGetApiV1ImportlistexclusionId = <
  TData = Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ImportlistexclusionId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ImportlistexclusionIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Indexer = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/indexer`, options);
};

export const getGetApiV1IndexerQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'indexer'] as const;
};

export const getGetApiV1IndexerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Indexer>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Indexer>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1IndexerQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Indexer>>> = ({
    signal,
  }) => getApiV1Indexer({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Indexer>>,
    TError,
    TData
  >;
};

export type GetApiV1IndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Indexer>>
>;
export type GetApiV1IndexerQueryError = AxiosError<unknown>;

export const useGetApiV1Indexer = <
  TData = Awaited<ReturnType<typeof getApiV1Indexer>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Indexer>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1IndexerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Indexer = (
  indexerResource: MaybeRef<IndexerResource>,
  params?: MaybeRef<PostApiV1IndexerParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerResource>> => {
  indexerResource = unref(indexerResource);
  params = unref(params);
  return axios.post(`http://localhost:3001/api/v1/indexer`, indexerResource, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getPostApiV1IndexerMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV1IndexerParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Indexer>>,
  TError,
  { data: IndexerResource; params?: PostApiV1IndexerParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Indexer>>,
    { data: IndexerResource; params?: PostApiV1IndexerParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Indexer(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Indexer>>
>;
export type PostApiV1IndexerMutationBody = IndexerResource;
export type PostApiV1IndexerMutationError = AxiosError<unknown>;

export const usePostApiV1Indexer = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Indexer>>,
    TError,
    { data: IndexerResource; params?: PostApiV1IndexerParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Indexer>>,
  TError,
  { data: IndexerResource; params?: PostApiV1IndexerParams },
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1IndexerId = (
  id: MaybeRef<string | undefined | null>,
  indexerResource: MaybeRef<IndexerResource>,
  params?: MaybeRef<PutApiV1IndexerIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerResource>> => {
  id = unref(id);
  indexerResource = unref(indexerResource);
  params = unref(params);
  return axios.put(
    `http://localhost:3001/api/v1/indexer/${id}`,
    indexerResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPutApiV1IndexerIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1IndexerId>>,
  TError,
  { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1IndexerId>>,
    { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1IndexerId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1IndexerId>>
>;
export type PutApiV1IndexerIdMutationBody = IndexerResource;
export type PutApiV1IndexerIdMutationError = AxiosError<unknown>;

export const usePutApiV1IndexerId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerId>>,
    TError,
    { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1IndexerId>>,
  TError,
  { id: string; data: IndexerResource; params?: PutApiV1IndexerIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV1IndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1IndexerId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/indexer/${id}`, options);
};

export const getDeleteApiV1IndexerIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1IndexerId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1IndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1IndexerId>>
>;

export type DeleteApiV1IndexerIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1IndexerId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1IndexerId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1IndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1IndexerId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/indexer/${id}`, options);
};

export const getGetApiV1IndexerIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'indexer', id] as const;
};

export const getGetApiV1IndexerIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1IndexerId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IndexerId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1IndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1IndexerId>>
  > = ({ signal }) => getApiV1IndexerId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1IndexerId>>,
    TError,
    TData
  >;
};

export type GetApiV1IndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1IndexerId>>
>;
export type GetApiV1IndexerIdQueryError = AxiosError<unknown>;

export const useGetApiV1IndexerId = <
  TData = Awaited<ReturnType<typeof getApiV1IndexerId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IndexerId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1IndexerIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1IndexerBulk = (
  indexerBulkResource: MaybeRef<IndexerBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerResource>> => {
  indexerBulkResource = unref(indexerBulkResource);
  return axios.put(
    `http://localhost:3001/api/v1/indexer/bulk`,
    indexerBulkResource,
    options
  );
};

export const getPutApiV1IndexerBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1IndexerBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1IndexerBulk>>
>;
export type PutApiV1IndexerBulkMutationBody = IndexerBulkResource;
export type PutApiV1IndexerBulkMutationError = AxiosError<unknown>;

export const usePutApiV1IndexerBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const mutationOptions = getPutApiV1IndexerBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1IndexerBulk = (
  indexerBulkResource: MaybeRef<IndexerBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  indexerBulkResource = unref(indexerBulkResource);
  return axios.delete(`http://localhost:3001/api/v1/indexer/bulk`, {
    data: indexerBulkResource,
    ...options,
  });
};

export const getDeleteApiV1IndexerBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
    { data: IndexerBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return deleteApiV1IndexerBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1IndexerBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>
>;
export type DeleteApiV1IndexerBulkMutationBody = IndexerBulkResource;
export type DeleteApiV1IndexerBulkMutationError = AxiosError<unknown>;

export const useDeleteApiV1IndexerBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
    TError,
    { data: IndexerBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1IndexerBulk>>,
  TError,
  { data: IndexerBulkResource },
  TContext
> => {
  const mutationOptions = getDeleteApiV1IndexerBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1IndexerSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/indexer/schema`, options);
};

export const getGetApiV1IndexerSchemaQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'indexer', 'schema'] as const;
};

export const getGetApiV1IndexerSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1IndexerSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1IndexerSchema>>
  > = ({ signal }) => getApiV1IndexerSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1IndexerSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1IndexerSchema>>
>;
export type GetApiV1IndexerSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1IndexerSchema = <
  TData = Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1IndexerSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1IndexerSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1IndexerTest = (
  indexerResource: MaybeRef<IndexerResource>,
  params?: MaybeRef<PostApiV1IndexerTestParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  indexerResource = unref(indexerResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/indexer/test`,
    indexerResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1IndexerTestMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTest>>,
    TError,
    { data: IndexerResource; params?: PostApiV1IndexerTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1IndexerTest>>,
  TError,
  { data: IndexerResource; params?: PostApiV1IndexerTestParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1IndexerTest>>,
    { data: IndexerResource; params?: PostApiV1IndexerTestParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1IndexerTest(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1IndexerTest>>
>;
export type PostApiV1IndexerTestMutationBody = IndexerResource;
export type PostApiV1IndexerTestMutationError = AxiosError<unknown>;

export const usePostApiV1IndexerTest = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTest>>,
    TError,
    { data: IndexerResource; params?: PostApiV1IndexerTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1IndexerTest>>,
  TError,
  { data: IndexerResource; params?: PostApiV1IndexerTestParams },
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1IndexerTestall = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/indexer/testall`,
    undefined,
    options
  );
};

export const getPostApiV1IndexerTestallMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
    void
  > = () => {
    return postApiV1IndexerTestall(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1IndexerTestall>>
>;

export type PostApiV1IndexerTestallMutationError = AxiosError<unknown>;

export const usePostApiV1IndexerTestall = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1IndexerTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1IndexerActionName = (
  name: MaybeRef<string | undefined | null>,
  indexerResource: MaybeRef<IndexerResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  name = unref(name);
  indexerResource = unref(indexerResource);
  return axios.post(
    `http://localhost:3001/api/v1/indexer/action/${name}`,
    indexerResource,
    options
  );
};

export const getPostApiV1IndexerActionNameMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
  TError,
  { name: string; data: IndexerResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
    { name: string; data: IndexerResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1IndexerActionName(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1IndexerActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1IndexerActionName>>
>;
export type PostApiV1IndexerActionNameMutationBody = IndexerResource;
export type PostApiV1IndexerActionNameMutationError = AxiosError<unknown>;

export const usePostApiV1IndexerActionName = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
    TError,
    { name: string; data: IndexerResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1IndexerActionName>>,
  TError,
  { name: string; data: IndexerResource },
  TContext
> => {
  const mutationOptions = getPostApiV1IndexerActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigIndexer = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerConfigResource>> => {
  return axios.get(`http://localhost:3001/api/v1/config/indexer`, options);
};

export const getGetApiV1ConfigIndexerQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'config', 'indexer'] as const;
};

export const getGetApiV1ConfigIndexerQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigIndexerQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigIndexer>>
  > = ({ signal }) => getApiV1ConfigIndexer({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigIndexerQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigIndexer>>
>;
export type GetApiV1ConfigIndexerQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigIndexer = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigIndexer>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigIndexerQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigIndexerId = (
  id: MaybeRef<string | undefined | null>,
  indexerConfigResource: MaybeRef<IndexerConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerConfigResource>> => {
  id = unref(id);
  indexerConfigResource = unref(indexerConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/indexer/${id}`,
    indexerConfigResource,
    options
  );
};

export const getPutApiV1ConfigIndexerIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
  TError,
  { id: string; data: IndexerConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
    { id: string; data: IndexerConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigIndexerId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigIndexerIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>
>;
export type PutApiV1ConfigIndexerIdMutationBody = IndexerConfigResource;
export type PutApiV1ConfigIndexerIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigIndexerId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
    TError,
    { id: string; data: IndexerConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigIndexerId>>,
  TError,
  { id: string; data: IndexerConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigIndexerIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigIndexerId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerConfigResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/config/indexer/${id}`,
    options
  );
};

export const getGetApiV1ConfigIndexerIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'indexer',
    id,
  ] as const;
};

export const getGetApiV1ConfigIndexerIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigIndexerIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>
  > = ({ signal }) => getApiV1ConfigIndexerId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigIndexerIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>
>;
export type GetApiV1ConfigIndexerIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigIndexerId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigIndexerId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigIndexerIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Indexerflag = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IndexerFlagResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/indexerflag`, options);
};

export const getGetApiV1IndexerflagQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'indexerflag'] as const;
};

export const getGetApiV1IndexerflagQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Indexerflag>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Indexerflag>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1IndexerflagQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Indexerflag>>
  > = ({ signal }) => getApiV1Indexerflag({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Indexerflag>>,
    TError,
    TData
  >;
};

export type GetApiV1IndexerflagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Indexerflag>>
>;
export type GetApiV1IndexerflagQueryError = AxiosError<unknown>;

export const useGetApiV1Indexerflag = <
  TData = Awaited<ReturnType<typeof getApiV1Indexerflag>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Indexerflag>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1IndexerflagQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Language = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LanguageResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/language`, options);
};

export const getGetApiV1LanguageQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'language'] as const;
};

export const getGetApiV1LanguageQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Language>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Language>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LanguageQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Language>>
  > = ({ signal }) => getApiV1Language({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Language>>,
    TError,
    TData
  >;
};

export type GetApiV1LanguageQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Language>>
>;
export type GetApiV1LanguageQueryError = AxiosError<unknown>;

export const useGetApiV1Language = <
  TData = Awaited<ReturnType<typeof getApiV1Language>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Language>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LanguageQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1LanguageId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LanguageResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/language/${id}`, options);
};

export const getGetApiV1LanguageIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'language', id] as const;
};

export const getGetApiV1LanguageIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LanguageId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LanguageId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LanguageIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LanguageId>>
  > = ({ signal }) => getApiV1LanguageId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LanguageId>>,
    TError,
    TData
  >;
};

export type GetApiV1LanguageIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LanguageId>>
>;
export type GetApiV1LanguageIdQueryError = AxiosError<unknown>;

export const useGetApiV1LanguageId = <
  TData = Awaited<ReturnType<typeof getApiV1LanguageId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LanguageId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LanguageIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Localization = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<string>> => {
  return axios.get(`http://localhost:3001/api/v1/localization`, options);
};

export const getGetApiV1LocalizationQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'localization'] as const;
};

export const getGetApiV1LocalizationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Localization>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Localization>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LocalizationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Localization>>
  > = ({ signal }) => getApiV1Localization({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Localization>>,
    TError,
    TData
  >;
};

export type GetApiV1LocalizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Localization>>
>;
export type GetApiV1LocalizationQueryError = AxiosError<unknown>;

export const useGetApiV1Localization = <
  TData = Awaited<ReturnType<typeof getApiV1Localization>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Localization>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LocalizationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Log = (
  params?: MaybeRef<GetApiV1LogParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LogResourcePagingResource>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/log`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1LogQueryKey = (
  params?: MaybeRef<GetApiV1LogParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'log',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1LogQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Log>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1LogParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Log>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LogQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Log>>> = ({
    signal,
  }) => getApiV1Log(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Log>>,
    TError,
    TData
  >;
};

export type GetApiV1LogQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Log>>
>;
export type GetApiV1LogQueryError = AxiosError<unknown>;

export const useGetApiV1Log = <
  TData = Awaited<ReturnType<typeof getApiV1Log>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1LogParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Log>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LogQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1LogFile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LogFileResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/log/file`, options);
};

export const getGetApiV1LogFileQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'log', 'file'] as const;
};

export const getGetApiV1LogFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1LogFile>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LogFileQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1LogFile>>> = ({
    signal,
  }) => getApiV1LogFile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFile>>,
    TError,
    TData
  >;
};

export type GetApiV1LogFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFile>>
>;
export type GetApiV1LogFileQueryError = AxiosError<unknown>;

export const useGetApiV1LogFile = <
  TData = Awaited<ReturnType<typeof getApiV1LogFile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1LogFile>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LogFileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1LogFileFilename = (
  filename: MaybeRef<string | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  filename = unref(filename);
  return axios.get(
    `http://localhost:3001/api/v1/log/file/${filename}`,
    options
  );
};

export const getGetApiV1LogFileFilenameQueryKey = (
  filename: MaybeRef<string | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'log',
    'file',
    filename,
  ] as const;
};

export const getGetApiV1LogFileFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
  TError = AxiosError<unknown>
>(
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LogFileFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LogFileFilename>>
  > = ({ signal }) =>
    getApiV1LogFileFilename(filename, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(filename)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
    TError,
    TData
  >;
};

export type GetApiV1LogFileFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFileFilename>>
>;
export type GetApiV1LogFileFilenameQueryError = AxiosError<unknown>;

export const useGetApiV1LogFileFilename = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
  TError = AxiosError<unknown>
>(
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LogFileFilenameQueryOptions(
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Manualimport = (
  manualImportUpdateResource: MaybeRef<ManualImportUpdateResource[]>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  manualImportUpdateResource = unref(manualImportUpdateResource);
  return axios.post(
    `http://localhost:3001/api/v1/manualimport`,
    manualImportUpdateResource,
    options
  );
};

export const getPostApiV1ManualimportMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Manualimport>>,
    TError,
    { data: ManualImportUpdateResource[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Manualimport>>,
  TError,
  { data: ManualImportUpdateResource[] },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Manualimport>>,
    { data: ManualImportUpdateResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Manualimport(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ManualimportMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Manualimport>>
>;
export type PostApiV1ManualimportMutationBody = ManualImportUpdateResource[];
export type PostApiV1ManualimportMutationError = AxiosError<unknown>;

export const usePostApiV1Manualimport = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Manualimport>>,
    TError,
    { data: ManualImportUpdateResource[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Manualimport>>,
  TError,
  { data: ManualImportUpdateResource[] },
  TContext
> => {
  const mutationOptions = getPostApiV1ManualimportMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Manualimport = (
  params?: MaybeRef<GetApiV1ManualimportParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ManualImportResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/manualimport`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1ManualimportQueryKey = (
  params?: MaybeRef<GetApiV1ManualimportParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'manualimport',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ManualimportQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Manualimport>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ManualimportParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Manualimport>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ManualimportQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Manualimport>>
  > = ({ signal }) => getApiV1Manualimport(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Manualimport>>,
    TError,
    TData
  >;
};

export type GetApiV1ManualimportQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Manualimport>>
>;
export type GetApiV1ManualimportQueryError = AxiosError<unknown>;

export const useGetApiV1Manualimport = <
  TData = Awaited<ReturnType<typeof getApiV1Manualimport>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ManualimportParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Manualimport>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ManualimportQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1MediacoverAuthorAuthorIdFilename = (
  authorId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  authorId = unref(authorId);
  filename = unref(filename);
  return axios.get(
    `http://localhost:3001/api/v1/mediacover/author/${authorId}/${filename}`,
    options
  );
};

export const getGetApiV1MediacoverAuthorAuthorIdFilenameQueryKey = (
  authorId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'mediacover',
    'author',
    authorId,
    filename,
  ] as const;
};

export const getGetApiV1MediacoverAuthorAuthorIdFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MediacoverAuthorAuthorIdFilename>>,
  TError = AxiosError<unknown>
>(
  authorId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverAuthorAuthorIdFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MediacoverAuthorAuthorIdFilenameQueryKey(
    authorId,
    filename
  );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MediacoverAuthorAuthorIdFilename>>
  > = ({ signal }) =>
    getApiV1MediacoverAuthorAuthorIdFilename(authorId, filename, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(authorId) && unref(filename))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MediacoverAuthorAuthorIdFilename>>,
    TError,
    TData
  >;
};

export type GetApiV1MediacoverAuthorAuthorIdFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MediacoverAuthorAuthorIdFilename>>
>;
export type GetApiV1MediacoverAuthorAuthorIdFilenameQueryError =
  AxiosError<unknown>;

export const useGetApiV1MediacoverAuthorAuthorIdFilename = <
  TData = Awaited<ReturnType<typeof getApiV1MediacoverAuthorAuthorIdFilename>>,
  TError = AxiosError<unknown>
>(
  authorId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverAuthorAuthorIdFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MediacoverAuthorAuthorIdFilenameQueryOptions(
    authorId,
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1MediacoverBookBookIdFilename = (
  bookId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  bookId = unref(bookId);
  filename = unref(filename);
  return axios.get(
    `http://localhost:3001/api/v1/mediacover/book/${bookId}/${filename}`,
    options
  );
};

export const getGetApiV1MediacoverBookBookIdFilenameQueryKey = (
  bookId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'mediacover',
    'book',
    bookId,
    filename,
  ] as const;
};

export const getGetApiV1MediacoverBookBookIdFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MediacoverBookBookIdFilename>>,
  TError = AxiosError<unknown>
>(
  bookId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverBookBookIdFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MediacoverBookBookIdFilenameQueryKey(
    bookId,
    filename
  );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MediacoverBookBookIdFilename>>
  > = ({ signal }) =>
    getApiV1MediacoverBookBookIdFilename(bookId, filename, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!(unref(bookId) && unref(filename))),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MediacoverBookBookIdFilename>>,
    TError,
    TData
  >;
};

export type GetApiV1MediacoverBookBookIdFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MediacoverBookBookIdFilename>>
>;
export type GetApiV1MediacoverBookBookIdFilenameQueryError =
  AxiosError<unknown>;

export const useGetApiV1MediacoverBookBookIdFilename = <
  TData = Awaited<ReturnType<typeof getApiV1MediacoverBookBookIdFilename>>,
  TError = AxiosError<unknown>
>(
  bookId: MaybeRef<number | undefined | null>,
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MediacoverBookBookIdFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MediacoverBookBookIdFilenameQueryOptions(
    bookId,
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1ConfigMediamanagement = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MediaManagementConfigResource>> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/mediamanagement`,
    options
  );
};

export const getGetApiV1ConfigMediamanagementQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'mediamanagement',
  ] as const;
};

export const getGetApiV1ConfigMediamanagementQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigMediamanagementQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>
  > = ({ signal }) =>
    getApiV1ConfigMediamanagement({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigMediamanagementQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>
>;
export type GetApiV1ConfigMediamanagementQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigMediamanagement = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMediamanagement>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigMediamanagementQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigMediamanagementId = (
  id: MaybeRef<string | undefined | null>,
  mediaManagementConfigResource: MaybeRef<MediaManagementConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MediaManagementConfigResource>> => {
  id = unref(id);
  mediaManagementConfigResource = unref(mediaManagementConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/mediamanagement/${id}`,
    mediaManagementConfigResource,
    options
  );
};

export const getPutApiV1ConfigMediamanagementIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
  TError,
  { id: string; data: MediaManagementConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
    { id: string; data: MediaManagementConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigMediamanagementId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigMediamanagementIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>
>;
export type PutApiV1ConfigMediamanagementIdMutationBody =
  MediaManagementConfigResource;
export type PutApiV1ConfigMediamanagementIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigMediamanagementId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
    TError,
    { id: string; data: MediaManagementConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigMediamanagementId>>,
  TError,
  { id: string; data: MediaManagementConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ConfigMediamanagementIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigMediamanagementId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MediaManagementConfigResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/config/mediamanagement/${id}`,
    options
  );
};

export const getGetApiV1ConfigMediamanagementIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'mediamanagement',
    id,
  ] as const;
};

export const getGetApiV1ConfigMediamanagementIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigMediamanagementIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>
  > = ({ signal }) =>
    getApiV1ConfigMediamanagementId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigMediamanagementIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>
>;
export type GetApiV1ConfigMediamanagementIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigMediamanagementId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMediamanagementId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigMediamanagementIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Metadata = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/metadata`, options);
};

export const getGetApiV1MetadataQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'metadata'] as const;
};

export const getGetApiV1MetadataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Metadata>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Metadata>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MetadataQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Metadata>>
  > = ({ signal }) => getApiV1Metadata({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Metadata>>,
    TError,
    TData
  >;
};

export type GetApiV1MetadataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Metadata>>
>;
export type GetApiV1MetadataQueryError = AxiosError<unknown>;

export const useGetApiV1Metadata = <
  TData = Awaited<ReturnType<typeof getApiV1Metadata>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Metadata>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MetadataQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Metadata = (
  metadataResource: MaybeRef<MetadataResource>,
  params?: MaybeRef<PostApiV1MetadataParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataResource>> => {
  metadataResource = unref(metadataResource);
  params = unref(params);
  return axios.post(`http://localhost:3001/api/v1/metadata`, metadataResource, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getPostApiV1MetadataMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV1MetadataParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Metadata>>,
  TError,
  { data: MetadataResource; params?: PostApiV1MetadataParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Metadata>>,
    { data: MetadataResource; params?: PostApiV1MetadataParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Metadata(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Metadata>>
>;
export type PostApiV1MetadataMutationBody = MetadataResource;
export type PostApiV1MetadataMutationError = AxiosError<unknown>;

export const usePostApiV1Metadata = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadata>>,
    TError,
    { data: MetadataResource; params?: PostApiV1MetadataParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Metadata>>,
  TError,
  { data: MetadataResource; params?: PostApiV1MetadataParams },
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1MetadataId = (
  id: MaybeRef<string | undefined | null>,
  metadataResource: MaybeRef<MetadataResource>,
  params?: MaybeRef<PutApiV1MetadataIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataResource>> => {
  id = unref(id);
  metadataResource = unref(metadataResource);
  params = unref(params);
  return axios.put(
    `http://localhost:3001/api/v1/metadata/${id}`,
    metadataResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPutApiV1MetadataIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1MetadataId>>,
  TError,
  { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1MetadataId>>,
    { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1MetadataId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1MetadataId>>
>;
export type PutApiV1MetadataIdMutationBody = MetadataResource;
export type PutApiV1MetadataIdMutationError = AxiosError<unknown>;

export const usePutApiV1MetadataId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataId>>,
    TError,
    { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1MetadataId>>,
  TError,
  { id: string; data: MetadataResource; params?: PutApiV1MetadataIdParams },
  TContext
> => {
  const mutationOptions = getPutApiV1MetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1MetadataId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/metadata/${id}`, options);
};

export const getDeleteApiV1MetadataIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1MetadataId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1MetadataIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1MetadataId>>
>;

export type DeleteApiV1MetadataIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1MetadataId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1MetadataId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1MetadataIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1MetadataId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/metadata/${id}`, options);
};

export const getGetApiV1MetadataIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'metadata', id] as const;
};

export const getGetApiV1MetadataIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MetadataIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataId>>
  > = ({ signal }) => getApiV1MetadataId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataId>>,
    TError,
    TData
  >;
};

export type GetApiV1MetadataIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataId>>
>;
export type GetApiV1MetadataIdQueryError = AxiosError<unknown>;

export const useGetApiV1MetadataId = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MetadataIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1MetadataSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/metadata/schema`, options);
};

export const getGetApiV1MetadataSchemaQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'metadata',
    'schema',
  ] as const;
};

export const getGetApiV1MetadataSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MetadataSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataSchema>>
  > = ({ signal }) => getApiV1MetadataSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1MetadataSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataSchema>>
>;
export type GetApiV1MetadataSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1MetadataSchema = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MetadataSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1MetadataTest = (
  metadataResource: MaybeRef<MetadataResource>,
  params?: MaybeRef<PostApiV1MetadataTestParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  metadataResource = unref(metadataResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/metadata/test`,
    metadataResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1MetadataTestMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTest>>,
    TError,
    { data: MetadataResource; params?: PostApiV1MetadataTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MetadataTest>>,
  TError,
  { data: MetadataResource; params?: PostApiV1MetadataTestParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MetadataTest>>,
    { data: MetadataResource; params?: PostApiV1MetadataTestParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1MetadataTest(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MetadataTest>>
>;
export type PostApiV1MetadataTestMutationBody = MetadataResource;
export type PostApiV1MetadataTestMutationError = AxiosError<unknown>;

export const usePostApiV1MetadataTest = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTest>>,
    TError,
    { data: MetadataResource; params?: PostApiV1MetadataTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1MetadataTest>>,
  TError,
  { data: MetadataResource; params?: PostApiV1MetadataTestParams },
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1MetadataTestall = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/metadata/testall`,
    undefined,
    options
  );
};

export const getPostApiV1MetadataTestallMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
    void
  > = () => {
    return postApiV1MetadataTestall(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MetadataTestall>>
>;

export type PostApiV1MetadataTestallMutationError = AxiosError<unknown>;

export const usePostApiV1MetadataTestall = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1MetadataTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1MetadataActionName = (
  name: MaybeRef<string | undefined | null>,
  metadataResource: MaybeRef<MetadataResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  name = unref(name);
  metadataResource = unref(metadataResource);
  return axios.post(
    `http://localhost:3001/api/v1/metadata/action/${name}`,
    metadataResource,
    options
  );
};

export const getPostApiV1MetadataActionNameMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
  TError,
  { name: string; data: MetadataResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
    { name: string; data: MetadataResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1MetadataActionName(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1MetadataActionName>>
>;
export type PostApiV1MetadataActionNameMutationBody = MetadataResource;
export type PostApiV1MetadataActionNameMutationError = AxiosError<unknown>;

export const usePostApiV1MetadataActionName = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
    TError,
    { name: string; data: MetadataResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1MetadataActionName>>,
  TError,
  { name: string; data: MetadataResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1MetadataActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Metadataprofile = (
  metadataProfileResource: MaybeRef<MetadataProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProfileResource>> => {
  metadataProfileResource = unref(metadataProfileResource);
  return axios.post(
    `http://localhost:3001/api/v1/metadataprofile`,
    metadataProfileResource,
    options
  );
};

export const getPostApiV1MetadataprofileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
    TError,
    { data: MetadataProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
  TError,
  { data: MetadataProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
    { data: MetadataProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Metadataprofile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1MetadataprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Metadataprofile>>
>;
export type PostApiV1MetadataprofileMutationBody = MetadataProfileResource;
export type PostApiV1MetadataprofileMutationError = AxiosError<unknown>;

export const usePostApiV1Metadataprofile = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
    TError,
    { data: MetadataProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Metadataprofile>>,
  TError,
  { data: MetadataProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1MetadataprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Metadataprofile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProfileResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/metadataprofile`, options);
};

export const getGetApiV1MetadataprofileQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'metadataprofile'] as const;
};

export const getGetApiV1MetadataprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MetadataprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Metadataprofile>>
  > = ({ signal }) => getApiV1Metadataprofile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
    TError,
    TData
  >;
};

export type GetApiV1MetadataprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Metadataprofile>>
>;
export type GetApiV1MetadataprofileQueryError = AxiosError<unknown>;

export const useGetApiV1Metadataprofile = <
  TData = Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Metadataprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MetadataprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1MetadataprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/metadataprofile/${id}`,
    options
  );
};

export const getDeleteApiV1MetadataprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1MetadataprofileId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1MetadataprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>
>;

export type DeleteApiV1MetadataprofileIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1MetadataprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1MetadataprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1MetadataprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1MetadataprofileId = (
  id: MaybeRef<string | undefined | null>,
  metadataProfileResource: MaybeRef<MetadataProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProfileResource>> => {
  id = unref(id);
  metadataProfileResource = unref(metadataProfileResource);
  return axios.put(
    `http://localhost:3001/api/v1/metadataprofile/${id}`,
    metadataProfileResource,
    options
  );
};

export const getPutApiV1MetadataprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
    TError,
    { id: string; data: MetadataProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
  TError,
  { id: string; data: MetadataProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
    { id: string; data: MetadataProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1MetadataprofileId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1MetadataprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1MetadataprofileId>>
>;
export type PutApiV1MetadataprofileIdMutationBody = MetadataProfileResource;
export type PutApiV1MetadataprofileIdMutationError = AxiosError<unknown>;

export const usePutApiV1MetadataprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
    TError,
    { id: string; data: MetadataProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1MetadataprofileId>>,
  TError,
  { id: string; data: MetadataProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1MetadataprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1MetadataprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProfileResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/metadataprofile/${id}`,
    options
  );
};

export const getGetApiV1MetadataprofileIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'metadataprofile',
    id,
  ] as const;
};

export const getGetApiV1MetadataprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MetadataprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataprofileId>>
  > = ({ signal }) =>
    getApiV1MetadataprofileId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
    TError,
    TData
  >;
};

export type GetApiV1MetadataprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataprofileId>>
>;
export type GetApiV1MetadataprofileIdQueryError = AxiosError<unknown>;

export const useGetApiV1MetadataprofileId = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1MetadataprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MetadataprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1MetadataprofileSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProfileResource>> => {
  return axios.get(
    `http://localhost:3001/api/v1/metadataprofile/schema`,
    options
  );
};

export const getGetApiV1MetadataprofileSchemaQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'metadataprofile',
    'schema',
  ] as const;
};

export const getGetApiV1MetadataprofileSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1MetadataprofileSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>
  > = ({ signal }) =>
    getApiV1MetadataprofileSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1MetadataprofileSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>
>;
export type GetApiV1MetadataprofileSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1MetadataprofileSchema = <
  TData = Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1MetadataprofileSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1MetadataprofileSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1ConfigMetadataprovider = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProviderConfigResource>> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/metadataprovider`,
    options
  );
};

export const getGetApiV1ConfigMetadataproviderQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'metadataprovider',
  ] as const;
};

export const getGetApiV1ConfigMetadataproviderQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigMetadataproviderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>
  > = ({ signal }) =>
    getApiV1ConfigMetadataprovider({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigMetadataproviderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>
>;
export type GetApiV1ConfigMetadataproviderQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigMetadataprovider = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigMetadataprovider>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigMetadataproviderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigMetadataproviderId = (
  id: MaybeRef<string | undefined | null>,
  metadataProviderConfigResource: MaybeRef<MetadataProviderConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProviderConfigResource>> => {
  id = unref(id);
  metadataProviderConfigResource = unref(metadataProviderConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/metadataprovider/${id}`,
    metadataProviderConfigResource,
    options
  );
};

export const getPutApiV1ConfigMetadataproviderIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
    TError,
    { id: string; data: MetadataProviderConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
  TError,
  { id: string; data: MetadataProviderConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
    { id: string; data: MetadataProviderConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigMetadataproviderId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigMetadataproviderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>
>;
export type PutApiV1ConfigMetadataproviderIdMutationBody =
  MetadataProviderConfigResource;
export type PutApiV1ConfigMetadataproviderIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigMetadataproviderId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
    TError,
    { id: string; data: MetadataProviderConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigMetadataproviderId>>,
  TError,
  { id: string; data: MetadataProviderConfigResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1ConfigMetadataproviderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigMetadataproviderId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<MetadataProviderConfigResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/config/metadataprovider/${id}`,
    options
  );
};

export const getGetApiV1ConfigMetadataproviderIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'metadataprovider',
    id,
  ] as const;
};

export const getGetApiV1ConfigMetadataproviderIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigMetadataproviderIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>
  > = ({ signal }) =>
    getApiV1ConfigMetadataproviderId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigMetadataproviderIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>
>;
export type GetApiV1ConfigMetadataproviderIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigMetadataproviderId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigMetadataproviderId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigMetadataproviderIdQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1WantedMissing = (
  params?: MaybeRef<GetApiV1WantedMissingParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResourcePagingResource>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/wanted/missing`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1WantedMissingQueryKey = (
  params?: MaybeRef<GetApiV1WantedMissingParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'wanted',
    'missing',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1WantedMissingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedMissing>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1WantedMissingParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissing>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1WantedMissingQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedMissing>>
  > = ({ signal }) =>
    getApiV1WantedMissing(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedMissing>>,
    TError,
    TData
  >;
};

export type GetApiV1WantedMissingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedMissing>>
>;
export type GetApiV1WantedMissingQueryError = AxiosError<unknown>;

export const useGetApiV1WantedMissing = <
  TData = Awaited<ReturnType<typeof getApiV1WantedMissing>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1WantedMissingParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissing>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1WantedMissingQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1WantedMissingId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<BookResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/wanted/missing/${id}`,
    options
  );
};

export const getGetApiV1WantedMissingIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'wanted',
    'missing',
    id,
  ] as const;
};

export const getGetApiV1WantedMissingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1WantedMissingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1WantedMissingId>>
  > = ({ signal }) => getApiV1WantedMissingId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
    TError,
    TData
  >;
};

export type GetApiV1WantedMissingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1WantedMissingId>>
>;
export type GetApiV1WantedMissingIdQueryError = AxiosError<unknown>;

export const useGetApiV1WantedMissingId = <
  TData = Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1WantedMissingId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1WantedMissingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1ConfigNaming = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NamingConfigResource>> => {
  return axios.get(`http://localhost:3001/api/v1/config/naming`, options);
};

export const getGetApiV1ConfigNamingQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'config', 'naming'] as const;
};

export const getGetApiV1ConfigNamingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigNamingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigNaming>>
  > = ({ signal }) => getApiV1ConfigNaming({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigNamingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigNaming>>
>;
export type GetApiV1ConfigNamingQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigNaming = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1ConfigNaming>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigNamingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigNamingId = (
  id: MaybeRef<string | undefined | null>,
  namingConfigResource: MaybeRef<NamingConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NamingConfigResource>> => {
  id = unref(id);
  namingConfigResource = unref(namingConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/naming/${id}`,
    namingConfigResource,
    options
  );
};

export const getPutApiV1ConfigNamingIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
  TError,
  { id: string; data: NamingConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
    { id: string; data: NamingConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigNamingId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigNamingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigNamingId>>
>;
export type PutApiV1ConfigNamingIdMutationBody = NamingConfigResource;
export type PutApiV1ConfigNamingIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigNamingId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
    TError,
    { id: string; data: NamingConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigNamingId>>,
  TError,
  { id: string; data: NamingConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigNamingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigNamingId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NamingConfigResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/config/naming/${id}`, options);
};

export const getGetApiV1ConfigNamingIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'naming',
    id,
  ] as const;
};

export const getGetApiV1ConfigNamingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigNamingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigNamingId>>
  > = ({ signal }) => getApiV1ConfigNamingId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigNamingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigNamingId>>
>;
export type GetApiV1ConfigNamingIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigNamingId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigNamingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1ConfigNamingExamples = (
  params?: MaybeRef<GetApiV1ConfigNamingExamplesParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/config/naming/examples`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1ConfigNamingExamplesQueryKey = (
  params?: MaybeRef<GetApiV1ConfigNamingExamplesParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'config',
    'naming',
    'examples',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ConfigNamingExamplesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ConfigNamingExamplesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigNamingExamplesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>
  > = ({ signal }) =>
    getApiV1ConfigNamingExamples(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigNamingExamplesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>
>;
export type GetApiV1ConfigNamingExamplesQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigNamingExamples = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ConfigNamingExamplesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigNamingExamples>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigNamingExamplesQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Notification = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NotificationResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/notification`, options);
};

export const getGetApiV1NotificationQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'notification'] as const;
};

export const getGetApiV1NotificationQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Notification>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Notification>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1NotificationQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Notification>>
  > = ({ signal }) => getApiV1Notification({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Notification>>,
    TError,
    TData
  >;
};

export type GetApiV1NotificationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Notification>>
>;
export type GetApiV1NotificationQueryError = AxiosError<unknown>;

export const useGetApiV1Notification = <
  TData = Awaited<ReturnType<typeof getApiV1Notification>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Notification>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1NotificationQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Notification = (
  notificationResource: MaybeRef<NotificationResource>,
  params?: MaybeRef<PostApiV1NotificationParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NotificationResource>> => {
  notificationResource = unref(notificationResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/notification`,
    notificationResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1NotificationMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV1NotificationParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Notification>>,
  TError,
  { data: NotificationResource; params?: PostApiV1NotificationParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Notification>>,
    { data: NotificationResource; params?: PostApiV1NotificationParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1Notification(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Notification>>
>;
export type PostApiV1NotificationMutationBody = NotificationResource;
export type PostApiV1NotificationMutationError = AxiosError<unknown>;

export const usePostApiV1Notification = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Notification>>,
    TError,
    { data: NotificationResource; params?: PostApiV1NotificationParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Notification>>,
  TError,
  { data: NotificationResource; params?: PostApiV1NotificationParams },
  TContext
> => {
  const mutationOptions = getPostApiV1NotificationMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1NotificationId = (
  id: MaybeRef<string | undefined | null>,
  notificationResource: MaybeRef<NotificationResource>,
  params?: MaybeRef<PutApiV1NotificationIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NotificationResource>> => {
  id = unref(id);
  notificationResource = unref(notificationResource);
  params = unref(params);
  return axios.put(
    `http://localhost:3001/api/v1/notification/${id}`,
    notificationResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPutApiV1NotificationIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV1NotificationIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1NotificationId>>,
  TError,
  {
    id: string;
    data: NotificationResource;
    params?: PutApiV1NotificationIdParams;
  },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1NotificationId>>,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV1NotificationIdParams;
    }
  > = (props) => {
    const { id, data, params } = props ?? {};

    return putApiV1NotificationId(id, data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1NotificationId>>
>;
export type PutApiV1NotificationIdMutationBody = NotificationResource;
export type PutApiV1NotificationIdMutationError = AxiosError<unknown>;

export const usePutApiV1NotificationId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1NotificationId>>,
    TError,
    {
      id: string;
      data: NotificationResource;
      params?: PutApiV1NotificationIdParams;
    },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1NotificationId>>,
  TError,
  {
    id: string;
    data: NotificationResource;
    params?: PutApiV1NotificationIdParams;
  },
  TContext
> => {
  const mutationOptions = getPutApiV1NotificationIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1NotificationId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/notification/${id}`,
    options
  );
};

export const getDeleteApiV1NotificationIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1NotificationId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1NotificationIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1NotificationId>>
>;

export type DeleteApiV1NotificationIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1NotificationId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1NotificationId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1NotificationIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1NotificationId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NotificationResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/notification/${id}`, options);
};

export const getGetApiV1NotificationIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'notification', id] as const;
};

export const getGetApiV1NotificationIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1NotificationId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1NotificationId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1NotificationIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1NotificationId>>
  > = ({ signal }) => getApiV1NotificationId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1NotificationId>>,
    TError,
    TData
  >;
};

export type GetApiV1NotificationIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1NotificationId>>
>;
export type GetApiV1NotificationIdQueryError = AxiosError<unknown>;

export const useGetApiV1NotificationId = <
  TData = Awaited<ReturnType<typeof getApiV1NotificationId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1NotificationId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1NotificationIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1NotificationSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<NotificationResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/notification/schema`, options);
};

export const getGetApiV1NotificationSchemaQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'notification',
    'schema',
  ] as const;
};

export const getGetApiV1NotificationSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1NotificationSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1NotificationSchema>>
  > = ({ signal }) => getApiV1NotificationSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1NotificationSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1NotificationSchema>>
>;
export type GetApiV1NotificationSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1NotificationSchema = <
  TData = Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1NotificationSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1NotificationSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1NotificationTest = (
  notificationResource: MaybeRef<NotificationResource>,
  params?: MaybeRef<PostApiV1NotificationTestParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  notificationResource = unref(notificationResource);
  params = unref(params);
  return axios.post(
    `http://localhost:3001/api/v1/notification/test`,
    notificationResource,
    {
      ...options,
      params: { ...unref(params), ...options?.params },
    }
  );
};

export const getPostApiV1NotificationTestMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTest>>,
    TError,
    { data: NotificationResource; params?: PostApiV1NotificationTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1NotificationTest>>,
  TError,
  { data: NotificationResource; params?: PostApiV1NotificationTestParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1NotificationTest>>,
    { data: NotificationResource; params?: PostApiV1NotificationTestParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return postApiV1NotificationTest(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationTestMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1NotificationTest>>
>;
export type PostApiV1NotificationTestMutationBody = NotificationResource;
export type PostApiV1NotificationTestMutationError = AxiosError<unknown>;

export const usePostApiV1NotificationTest = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTest>>,
    TError,
    { data: NotificationResource; params?: PostApiV1NotificationTestParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1NotificationTest>>,
  TError,
  { data: NotificationResource; params?: PostApiV1NotificationTestParams },
  TContext
> => {
  const mutationOptions = getPostApiV1NotificationTestMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1NotificationTestall = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/notification/testall`,
    undefined,
    options
  );
};

export const getPostApiV1NotificationTestallMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
    void
  > = () => {
    return postApiV1NotificationTestall(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationTestallMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1NotificationTestall>>
>;

export type PostApiV1NotificationTestallMutationError = AxiosError<unknown>;

export const usePostApiV1NotificationTestall = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1NotificationTestall>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getPostApiV1NotificationTestallMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1NotificationActionName = (
  name: MaybeRef<string | undefined | null>,
  notificationResource: MaybeRef<NotificationResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  name = unref(name);
  notificationResource = unref(notificationResource);
  return axios.post(
    `http://localhost:3001/api/v1/notification/action/${name}`,
    notificationResource,
    options
  );
};

export const getPostApiV1NotificationActionNameMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
  TError,
  { name: string; data: NotificationResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
    { name: string; data: NotificationResource }
  > = (props) => {
    const { name, data } = props ?? {};

    return postApiV1NotificationActionName(name, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1NotificationActionNameMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1NotificationActionName>>
>;
export type PostApiV1NotificationActionNameMutationBody = NotificationResource;
export type PostApiV1NotificationActionNameMutationError = AxiosError<unknown>;

export const usePostApiV1NotificationActionName = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
    TError,
    { name: string; data: NotificationResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1NotificationActionName>>,
  TError,
  { name: string; data: NotificationResource },
  TContext
> => {
  const mutationOptions =
    getPostApiV1NotificationActionNameMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Parse = (
  params?: MaybeRef<GetApiV1ParseParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ParseResource>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/parse`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1ParseQueryKey = (
  params?: MaybeRef<GetApiV1ParseParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'parse',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ParseQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Parse>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ParseParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ParseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Parse>>> = ({
    signal,
  }) => getApiV1Parse(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Parse>>,
    TError,
    TData
  >;
};

export type GetApiV1ParseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Parse>>
>;
export type GetApiV1ParseQueryError = AxiosError<unknown>;

export const useGetApiV1Parse = <
  TData = Awaited<ReturnType<typeof getApiV1Parse>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ParseParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Parse>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ParseQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getPing = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PingResource>> => {
  return axios.get(`http://localhost:3001/ping`, options);
};

export const getGetPingQueryKey = () => {
  return ['http:', 'localhost:3001', 'ping'] as const;
};

export const getGetPingQueryOptions = <
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetPingQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPing>>> = ({
    signal,
  }) => getPing({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPing>>,
    TError,
    TData
  >;
};

export type GetPingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPing>>
>;
export type GetPingQueryError = AxiosError<unknown>;

export const useGetPing = <
  TData = Awaited<ReturnType<typeof getPing>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getPing>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const headPing = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<PingResource>> => {
  return axios.head(`http://localhost:3001/ping`, options);
};

export const getHeadPingMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof headPing>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof headPing>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof headPing>>,
    void
  > = () => {
    return headPing(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type HeadPingMutationResult = NonNullable<
  Awaited<ReturnType<typeof headPing>>
>;

export type HeadPingMutationError = AxiosError<unknown>;

export const useHeadPing = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof headPing>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof headPing>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getHeadPingMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1QualitydefinitionId = (
  id: MaybeRef<string | undefined | null>,
  qualityDefinitionResource: MaybeRef<QualityDefinitionResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityDefinitionResource>> => {
  id = unref(id);
  qualityDefinitionResource = unref(qualityDefinitionResource);
  return axios.put(
    `http://localhost:3001/api/v1/qualitydefinition/${id}`,
    qualityDefinitionResource,
    options
  );
};

export const getPutApiV1QualitydefinitionIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
  TError,
  { id: string; data: QualityDefinitionResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
    { id: string; data: QualityDefinitionResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1QualitydefinitionId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1QualitydefinitionIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>
>;
export type PutApiV1QualitydefinitionIdMutationBody = QualityDefinitionResource;
export type PutApiV1QualitydefinitionIdMutationError = AxiosError<unknown>;

export const usePutApiV1QualitydefinitionId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
    TError,
    { id: string; data: QualityDefinitionResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionId>>,
  TError,
  { id: string; data: QualityDefinitionResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1QualitydefinitionIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1QualitydefinitionId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityDefinitionResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/qualitydefinition/${id}`,
    options
  );
};

export const getGetApiV1QualitydefinitionIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'qualitydefinition',
    id,
  ] as const;
};

export const getGetApiV1QualitydefinitionIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QualitydefinitionIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>
  > = ({ signal }) =>
    getApiV1QualitydefinitionId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
    TError,
    TData
  >;
};

export type GetApiV1QualitydefinitionIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>
>;
export type GetApiV1QualitydefinitionIdQueryError = AxiosError<unknown>;

export const useGetApiV1QualitydefinitionId = <
  TData = Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualitydefinitionId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QualitydefinitionIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Qualitydefinition = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityDefinitionResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/qualitydefinition`, options);
};

export const getGetApiV1QualitydefinitionQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'qualitydefinition'] as const;
};

export const getGetApiV1QualitydefinitionQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QualitydefinitionQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Qualitydefinition>>
  > = ({ signal }) => getApiV1Qualitydefinition({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
    TError,
    TData
  >;
};

export type GetApiV1QualitydefinitionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Qualitydefinition>>
>;
export type GetApiV1QualitydefinitionQueryError = AxiosError<unknown>;

export const useGetApiV1Qualitydefinition = <
  TData = Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualitydefinition>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QualitydefinitionQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1QualitydefinitionUpdate = (
  qualityDefinitionResource: MaybeRef<QualityDefinitionResource[]>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  qualityDefinitionResource = unref(qualityDefinitionResource);
  return axios.put(
    `http://localhost:3001/api/v1/qualitydefinition/update`,
    qualityDefinitionResource,
    options
  );
};

export const getPutApiV1QualitydefinitionUpdateMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
  TError,
  { data: QualityDefinitionResource[] },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
    { data: QualityDefinitionResource[] }
  > = (props) => {
    const { data } = props ?? {};

    return putApiV1QualitydefinitionUpdate(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1QualitydefinitionUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>
>;
export type PutApiV1QualitydefinitionUpdateMutationBody =
  QualityDefinitionResource[];
export type PutApiV1QualitydefinitionUpdateMutationError = AxiosError<unknown>;

export const usePutApiV1QualitydefinitionUpdate = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
    TError,
    { data: QualityDefinitionResource[] },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1QualitydefinitionUpdate>>,
  TError,
  { data: QualityDefinitionResource[] },
  TContext
> => {
  const mutationOptions =
    getPutApiV1QualitydefinitionUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Qualityprofile = (
  qualityProfileResource: MaybeRef<QualityProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityProfileResource>> => {
  qualityProfileResource = unref(qualityProfileResource);
  return axios.post(
    `http://localhost:3001/api/v1/qualityprofile`,
    qualityProfileResource,
    options
  );
};

export const getPostApiV1QualityprofileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
  TError,
  { data: QualityProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
    { data: QualityProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Qualityprofile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1QualityprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Qualityprofile>>
>;
export type PostApiV1QualityprofileMutationBody = QualityProfileResource;
export type PostApiV1QualityprofileMutationError = AxiosError<unknown>;

export const usePostApiV1Qualityprofile = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
    TError,
    { data: QualityProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Qualityprofile>>,
  TError,
  { data: QualityProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1QualityprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Qualityprofile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityProfileResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/qualityprofile`, options);
};

export const getGetApiV1QualityprofileQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'qualityprofile'] as const;
};

export const getGetApiV1QualityprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QualityprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Qualityprofile>>
  > = ({ signal }) => getApiV1Qualityprofile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
    TError,
    TData
  >;
};

export type GetApiV1QualityprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Qualityprofile>>
>;
export type GetApiV1QualityprofileQueryError = AxiosError<unknown>;

export const useGetApiV1Qualityprofile = <
  TData = Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Qualityprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QualityprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1QualityprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/qualityprofile/${id}`,
    options
  );
};

export const getDeleteApiV1QualityprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1QualityprofileId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>
>;

export type DeleteApiV1QualityprofileIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1QualityprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1QualityprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1QualityprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1QualityprofileId = (
  id: MaybeRef<string | undefined | null>,
  qualityProfileResource: MaybeRef<QualityProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityProfileResource>> => {
  id = unref(id);
  qualityProfileResource = unref(qualityProfileResource);
  return axios.put(
    `http://localhost:3001/api/v1/qualityprofile/${id}`,
    qualityProfileResource,
    options
  );
};

export const getPutApiV1QualityprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
  TError,
  { id: string; data: QualityProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
    { id: string; data: QualityProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1QualityprofileId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1QualityprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1QualityprofileId>>
>;
export type PutApiV1QualityprofileIdMutationBody = QualityProfileResource;
export type PutApiV1QualityprofileIdMutationError = AxiosError<unknown>;

export const usePutApiV1QualityprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
    TError,
    { id: string; data: QualityProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1QualityprofileId>>,
  TError,
  { id: string; data: QualityProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1QualityprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1QualityprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityProfileResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/qualityprofile/${id}`,
    options
  );
};

export const getGetApiV1QualityprofileIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'qualityprofile',
    id,
  ] as const;
};

export const getGetApiV1QualityprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QualityprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QualityprofileId>>
  > = ({ signal }) => getApiV1QualityprofileId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
    TError,
    TData
  >;
};

export type GetApiV1QualityprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QualityprofileId>>
>;
export type GetApiV1QualityprofileIdQueryError = AxiosError<unknown>;

export const useGetApiV1QualityprofileId = <
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QualityprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QualityprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1QualityprofileSchema = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QualityProfileResource>> => {
  return axios.get(
    `http://localhost:3001/api/v1/qualityprofile/schema`,
    options
  );
};

export const getGetApiV1QualityprofileSchemaQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'qualityprofile',
    'schema',
  ] as const;
};

export const getGetApiV1QualityprofileSchemaQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QualityprofileSchemaQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>
  > = ({ signal }) => getApiV1QualityprofileSchema({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
    TError,
    TData
  >;
};

export type GetApiV1QualityprofileSchemaQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>
>;
export type GetApiV1QualityprofileSchemaQueryError = AxiosError<unknown>;

export const useGetApiV1QualityprofileSchema = <
  TData = Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QualityprofileSchema>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QualityprofileSchemaQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1QueueId = (
  id: MaybeRef<number | undefined | null>,
  params?: MaybeRef<DeleteApiV1QueueIdParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  params = unref(params);
  return axios.delete(`http://localhost:3001/api/v1/queue/${id}`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getDeleteApiV1QueueIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueId>>,
    TError,
    { id: number; params?: DeleteApiV1QueueIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1QueueId>>,
  TError,
  { id: number; params?: DeleteApiV1QueueIdParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1QueueId>>,
    { id: number; params?: DeleteApiV1QueueIdParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return deleteApiV1QueueId(id, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1QueueIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1QueueId>>
>;

export type DeleteApiV1QueueIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1QueueId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueId>>,
    TError,
    { id: number; params?: DeleteApiV1QueueIdParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1QueueId>>,
  TError,
  { id: number; params?: DeleteApiV1QueueIdParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1QueueIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1QueueBulk = (
  queueBulkResource: MaybeRef<QueueBulkResource>,
  params?: MaybeRef<DeleteApiV1QueueBulkParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  queueBulkResource = unref(queueBulkResource);
  params = unref(params);
  return axios.delete(`http://localhost:3001/api/v1/queue/bulk`, {
    data: queueBulkResource,
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getDeleteApiV1QueueBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
  TError,
  { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
    { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return deleteApiV1QueueBulk(data, params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1QueueBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1QueueBulk>>
>;
export type DeleteApiV1QueueBulkMutationBody = QueueBulkResource;
export type DeleteApiV1QueueBulkMutationError = AxiosError<unknown>;

export const useDeleteApiV1QueueBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
    TError,
    { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1QueueBulk>>,
  TError,
  { data: QueueBulkResource; params?: DeleteApiV1QueueBulkParams },
  TContext
> => {
  const mutationOptions = getDeleteApiV1QueueBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Queue = (
  params?: MaybeRef<GetApiV1QueueParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QueueResourcePagingResource>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/queue`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1QueueQueryKey = (
  params?: MaybeRef<GetApiV1QueueParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'queue',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1QueueQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Queue>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1QueueParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Queue>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QueueQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Queue>>> = ({
    signal,
  }) => getApiV1Queue(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Queue>>,
    TError,
    TData
  >;
};

export type GetApiV1QueueQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Queue>>
>;
export type GetApiV1QueueQueryError = AxiosError<unknown>;

export const useGetApiV1Queue = <
  TData = Awaited<ReturnType<typeof getApiV1Queue>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1QueueParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Queue>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QueueQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1QueueGrabId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.post(
    `http://localhost:3001/api/v1/queue/grab/${id}`,
    undefined,
    options
  );
};

export const getPostApiV1QueueGrabIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return postApiV1QueueGrabId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1QueueGrabIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1QueueGrabId>>
>;

export type PostApiV1QueueGrabIdMutationError = AxiosError<unknown>;

export const usePostApiV1QueueGrabId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1QueueGrabId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPostApiV1QueueGrabIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1QueueGrabBulk = (
  queueBulkResource: MaybeRef<QueueBulkResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  queueBulkResource = unref(queueBulkResource);
  return axios.post(
    `http://localhost:3001/api/v1/queue/grab/bulk`,
    queueBulkResource,
    options
  );
};

export const getPostApiV1QueueGrabBulkMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
  TError,
  { data: QueueBulkResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
    { data: QueueBulkResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1QueueGrabBulk(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1QueueGrabBulkMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>
>;
export type PostApiV1QueueGrabBulkMutationBody = QueueBulkResource;
export type PostApiV1QueueGrabBulkMutationError = AxiosError<unknown>;

export const usePostApiV1QueueGrabBulk = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
    TError,
    { data: QueueBulkResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1QueueGrabBulk>>,
  TError,
  { data: QueueBulkResource },
  TContext
> => {
  const mutationOptions = getPostApiV1QueueGrabBulkMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1QueueDetails = (
  params?: MaybeRef<GetApiV1QueueDetailsParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QueueResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/queue/details`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1QueueDetailsQueryKey = (
  params?: MaybeRef<GetApiV1QueueDetailsParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'queue',
    'details',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1QueueDetailsQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QueueDetails>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1QueueDetailsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QueueDetails>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QueueDetailsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QueueDetails>>
  > = ({ signal }) => getApiV1QueueDetails(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QueueDetails>>,
    TError,
    TData
  >;
};

export type GetApiV1QueueDetailsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QueueDetails>>
>;
export type GetApiV1QueueDetailsQueryError = AxiosError<unknown>;

export const useGetApiV1QueueDetails = <
  TData = Awaited<ReturnType<typeof getApiV1QueueDetails>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1QueueDetailsParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1QueueDetails>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QueueDetailsQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1QueueStatus = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<QueueStatusResource>> => {
  return axios.get(`http://localhost:3001/api/v1/queue/status`, options);
};

export const getGetApiV1QueueStatusQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'queue', 'status'] as const;
};

export const getGetApiV1QueueStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1QueueStatus>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QueueStatus>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1QueueStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1QueueStatus>>
  > = ({ signal }) => getApiV1QueueStatus({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1QueueStatus>>,
    TError,
    TData
  >;
};

export type GetApiV1QueueStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1QueueStatus>>
>;
export type GetApiV1QueueStatusQueryError = AxiosError<unknown>;

export const useGetApiV1QueueStatus = <
  TData = Awaited<ReturnType<typeof getApiV1QueueStatus>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1QueueStatus>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1QueueStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Release = (
  releaseResource: MaybeRef<ReleaseResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReleaseResource>> => {
  releaseResource = unref(releaseResource);
  return axios.post(
    `http://localhost:3001/api/v1/release`,
    releaseResource,
    options
  );
};

export const getPostApiV1ReleaseMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Release>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Release>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Release(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ReleaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Release>>
>;
export type PostApiV1ReleaseMutationBody = ReleaseResource;
export type PostApiV1ReleaseMutationError = AxiosError<unknown>;

export const usePostApiV1Release = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Release>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Release>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const mutationOptions = getPostApiV1ReleaseMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Release = (
  params?: MaybeRef<GetApiV1ReleaseParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReleaseResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/release`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1ReleaseQueryKey = (
  params?: MaybeRef<GetApiV1ReleaseParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'release',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1ReleaseQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Release>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ReleaseParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Release>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ReleaseQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Release>>> = ({
    signal,
  }) => getApiV1Release(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Release>>,
    TError,
    TData
  >;
};

export type GetApiV1ReleaseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Release>>
>;
export type GetApiV1ReleaseQueryError = AxiosError<unknown>;

export const useGetApiV1Release = <
  TData = Awaited<ReturnType<typeof getApiV1Release>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1ReleaseParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1Release>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ReleaseQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Releaseprofile = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReleaseProfileResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/releaseprofile`, options);
};

export const getGetApiV1ReleaseprofileQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'releaseprofile'] as const;
};

export const getGetApiV1ReleaseprofileQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ReleaseprofileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Releaseprofile>>
  > = ({ signal }) => getApiV1Releaseprofile({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
    TError,
    TData
  >;
};

export type GetApiV1ReleaseprofileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Releaseprofile>>
>;
export type GetApiV1ReleaseprofileQueryError = AxiosError<unknown>;

export const useGetApiV1Releaseprofile = <
  TData = Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Releaseprofile>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ReleaseprofileQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Releaseprofile = (
  releaseProfileResource: MaybeRef<ReleaseProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReleaseProfileResource>> => {
  releaseProfileResource = unref(releaseProfileResource);
  return axios.post(
    `http://localhost:3001/api/v1/releaseprofile`,
    releaseProfileResource,
    options
  );
};

export const getPostApiV1ReleaseprofileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
    TError,
    { data: ReleaseProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
  TError,
  { data: ReleaseProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
    { data: ReleaseProfileResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Releaseprofile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ReleaseprofileMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Releaseprofile>>
>;
export type PostApiV1ReleaseprofileMutationBody = ReleaseProfileResource;
export type PostApiV1ReleaseprofileMutationError = AxiosError<unknown>;

export const usePostApiV1Releaseprofile = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
    TError,
    { data: ReleaseProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Releaseprofile>>,
  TError,
  { data: ReleaseProfileResource },
  TContext
> => {
  const mutationOptions = getPostApiV1ReleaseprofileMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1ReleaseprofileId = (
  id: MaybeRef<string | undefined | null>,
  releaseProfileResource: MaybeRef<ReleaseProfileResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReleaseProfileResource>> => {
  id = unref(id);
  releaseProfileResource = unref(releaseProfileResource);
  return axios.put(
    `http://localhost:3001/api/v1/releaseprofile/${id}`,
    releaseProfileResource,
    options
  );
};

export const getPutApiV1ReleaseprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
    TError,
    { id: string; data: ReleaseProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
  TError,
  { id: string; data: ReleaseProfileResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
    { id: string; data: ReleaseProfileResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ReleaseprofileId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ReleaseprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>
>;
export type PutApiV1ReleaseprofileIdMutationBody = ReleaseProfileResource;
export type PutApiV1ReleaseprofileIdMutationError = AxiosError<unknown>;

export const usePutApiV1ReleaseprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
    TError,
    { id: string; data: ReleaseProfileResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ReleaseprofileId>>,
  TError,
  { id: string; data: ReleaseProfileResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ReleaseprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1ReleaseprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/releaseprofile/${id}`,
    options
  );
};

export const getDeleteApiV1ReleaseprofileIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1ReleaseprofileId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1ReleaseprofileIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>
>;

export type DeleteApiV1ReleaseprofileIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1ReleaseprofileId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1ReleaseprofileId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1ReleaseprofileIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ReleaseprofileId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReleaseProfileResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/releaseprofile/${id}`,
    options
  );
};

export const getGetApiV1ReleaseprofileIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'releaseprofile',
    id,
  ] as const;
};

export const getGetApiV1ReleaseprofileIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ReleaseprofileIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>
  > = ({ signal }) => getApiV1ReleaseprofileId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
    TError,
    TData
  >;
};

export type GetApiV1ReleaseprofileIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>
>;
export type GetApiV1ReleaseprofileIdQueryError = AxiosError<unknown>;

export const useGetApiV1ReleaseprofileId = <
  TData = Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ReleaseprofileId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ReleaseprofileIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1ReleasePush = (
  releaseResource: MaybeRef<ReleaseResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<ReleaseResource>> => {
  releaseResource = unref(releaseResource);
  return axios.post(
    `http://localhost:3001/api/v1/release/push`,
    releaseResource,
    options
  );
};

export const getPostApiV1ReleasePushMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1ReleasePush>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1ReleasePush>>,
    { data: ReleaseResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1ReleasePush(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1ReleasePushMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1ReleasePush>>
>;
export type PostApiV1ReleasePushMutationBody = ReleaseResource;
export type PostApiV1ReleasePushMutationError = AxiosError<unknown>;

export const usePostApiV1ReleasePush = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1ReleasePush>>,
    TError,
    { data: ReleaseResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1ReleasePush>>,
  TError,
  { data: ReleaseResource },
  TContext
> => {
  const mutationOptions = getPostApiV1ReleasePushMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1Remotepathmapping = (
  remotePathMappingResource: MaybeRef<RemotePathMappingResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RemotePathMappingResource>> => {
  remotePathMappingResource = unref(remotePathMappingResource);
  return axios.post(
    `http://localhost:3001/api/v1/remotepathmapping`,
    remotePathMappingResource,
    options
  );
};

export const getPostApiV1RemotepathmappingMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
  TError,
  { data: RemotePathMappingResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
    { data: RemotePathMappingResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Remotepathmapping(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1RemotepathmappingMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Remotepathmapping>>
>;
export type PostApiV1RemotepathmappingMutationBody = RemotePathMappingResource;
export type PostApiV1RemotepathmappingMutationError = AxiosError<unknown>;

export const usePostApiV1Remotepathmapping = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
    TError,
    { data: RemotePathMappingResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Remotepathmapping>>,
  TError,
  { data: RemotePathMappingResource },
  TContext
> => {
  const mutationOptions = getPostApiV1RemotepathmappingMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Remotepathmapping = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RemotePathMappingResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/remotepathmapping`, options);
};

export const getGetApiV1RemotepathmappingQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'remotepathmapping'] as const;
};

export const getGetApiV1RemotepathmappingQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1RemotepathmappingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Remotepathmapping>>
  > = ({ signal }) => getApiV1Remotepathmapping({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
    TError,
    TData
  >;
};

export type GetApiV1RemotepathmappingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Remotepathmapping>>
>;
export type GetApiV1RemotepathmappingQueryError = AxiosError<unknown>;

export const useGetApiV1Remotepathmapping = <
  TData = Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Remotepathmapping>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RemotepathmappingQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const deleteApiV1RemotepathmappingId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(
    `http://localhost:3001/api/v1/remotepathmapping/${id}`,
    options
  );
};

export const getDeleteApiV1RemotepathmappingIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1RemotepathmappingId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>
>;

export type DeleteApiV1RemotepathmappingIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1RemotepathmappingId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1RemotepathmappingId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions =
    getDeleteApiV1RemotepathmappingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1RemotepathmappingId = (
  id: MaybeRef<string | undefined | null>,
  remotePathMappingResource: MaybeRef<RemotePathMappingResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RemotePathMappingResource>> => {
  id = unref(id);
  remotePathMappingResource = unref(remotePathMappingResource);
  return axios.put(
    `http://localhost:3001/api/v1/remotepathmapping/${id}`,
    remotePathMappingResource,
    options
  );
};

export const getPutApiV1RemotepathmappingIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
  TError,
  { id: string; data: RemotePathMappingResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
    { id: string; data: RemotePathMappingResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1RemotepathmappingId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1RemotepathmappingIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>
>;
export type PutApiV1RemotepathmappingIdMutationBody = RemotePathMappingResource;
export type PutApiV1RemotepathmappingIdMutationError = AxiosError<unknown>;

export const usePutApiV1RemotepathmappingId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
    TError,
    { id: string; data: RemotePathMappingResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1RemotepathmappingId>>,
  TError,
  { id: string; data: RemotePathMappingResource },
  TContext
> => {
  const mutationOptions =
    getPutApiV1RemotepathmappingIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1RemotepathmappingId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RemotePathMappingResource>> => {
  id = unref(id);
  return axios.get(
    `http://localhost:3001/api/v1/remotepathmapping/${id}`,
    options
  );
};

export const getGetApiV1RemotepathmappingIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'remotepathmapping',
    id,
  ] as const;
};

export const getGetApiV1RemotepathmappingIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1RemotepathmappingIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>
  > = ({ signal }) =>
    getApiV1RemotepathmappingId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
    TError,
    TData
  >;
};

export type GetApiV1RemotepathmappingIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>
>;
export type GetApiV1RemotepathmappingIdQueryError = AxiosError<unknown>;

export const useGetApiV1RemotepathmappingId = <
  TData = Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RemotepathmappingId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RemotepathmappingIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Rename = (
  params?: MaybeRef<GetApiV1RenameParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RenameBookResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/rename`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1RenameQueryKey = (
  params?: MaybeRef<GetApiV1RenameParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'rename',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1RenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Rename>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1RenameParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Rename>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1RenameQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Rename>>> = ({
    signal,
  }) => getApiV1Rename(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Rename>>,
    TError,
    TData
  >;
};

export type GetApiV1RenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Rename>>
>;
export type GetApiV1RenameQueryError = AxiosError<unknown>;

export const useGetApiV1Rename = <
  TData = Awaited<ReturnType<typeof getApiV1Rename>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1RenameParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Rename>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RenameQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Retag = (
  params?: MaybeRef<GetApiV1RetagParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RetagBookResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/retag`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1RetagQueryKey = (
  params?: MaybeRef<GetApiV1RetagParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'retag',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1RetagQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Retag>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1RetagParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Retag>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1RetagQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Retag>>> = ({
    signal,
  }) => getApiV1Retag(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Retag>>,
    TError,
    TData
  >;
};

export type GetApiV1RetagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Retag>>
>;
export type GetApiV1RetagQueryError = AxiosError<unknown>;

export const useGetApiV1Retag = <
  TData = Awaited<ReturnType<typeof getApiV1Retag>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1RetagParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Retag>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RetagQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Rootfolder = (
  rootFolderResource: MaybeRef<RootFolderResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RootFolderResource>> => {
  rootFolderResource = unref(rootFolderResource);
  return axios.post(
    `http://localhost:3001/api/v1/rootfolder`,
    rootFolderResource,
    options
  );
};

export const getPostApiV1RootfolderMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Rootfolder>>,
  TError,
  { data: RootFolderResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Rootfolder>>,
    { data: RootFolderResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Rootfolder(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1RootfolderMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Rootfolder>>
>;
export type PostApiV1RootfolderMutationBody = RootFolderResource;
export type PostApiV1RootfolderMutationError = AxiosError<unknown>;

export const usePostApiV1Rootfolder = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Rootfolder>>,
    TError,
    { data: RootFolderResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Rootfolder>>,
  TError,
  { data: RootFolderResource },
  TContext
> => {
  const mutationOptions = getPostApiV1RootfolderMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Rootfolder = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RootFolderResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/rootfolder`, options);
};

export const getGetApiV1RootfolderQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'rootfolder'] as const;
};

export const getGetApiV1RootfolderQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Rootfolder>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Rootfolder>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1RootfolderQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1Rootfolder>>
  > = ({ signal }) => getApiV1Rootfolder({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Rootfolder>>,
    TError,
    TData
  >;
};

export type GetApiV1RootfolderQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Rootfolder>>
>;
export type GetApiV1RootfolderQueryError = AxiosError<unknown>;

export const useGetApiV1Rootfolder = <
  TData = Awaited<ReturnType<typeof getApiV1Rootfolder>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1Rootfolder>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RootfolderQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1RootfolderId = (
  id: MaybeRef<string | undefined | null>,
  rootFolderResource: MaybeRef<RootFolderResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RootFolderResource>> => {
  id = unref(id);
  rootFolderResource = unref(rootFolderResource);
  return axios.put(
    `http://localhost:3001/api/v1/rootfolder/${id}`,
    rootFolderResource,
    options
  );
};

export const getPutApiV1RootfolderIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RootfolderId>>,
    TError,
    { id: string; data: RootFolderResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1RootfolderId>>,
  TError,
  { id: string; data: RootFolderResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1RootfolderId>>,
    { id: string; data: RootFolderResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1RootfolderId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1RootfolderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1RootfolderId>>
>;
export type PutApiV1RootfolderIdMutationBody = RootFolderResource;
export type PutApiV1RootfolderIdMutationError = AxiosError<unknown>;

export const usePutApiV1RootfolderId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1RootfolderId>>,
    TError,
    { id: string; data: RootFolderResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1RootfolderId>>,
  TError,
  { id: string; data: RootFolderResource },
  TContext
> => {
  const mutationOptions = getPutApiV1RootfolderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1RootfolderId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/rootfolder/${id}`, options);
};

export const getDeleteApiV1RootfolderIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1RootfolderId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1RootfolderIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1RootfolderId>>
>;

export type DeleteApiV1RootfolderIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1RootfolderId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1RootfolderId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1RootfolderIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1RootfolderId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<RootFolderResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/rootfolder/${id}`, options);
};

export const getGetApiV1RootfolderIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'rootfolder', id] as const;
};

export const getGetApiV1RootfolderIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1RootfolderId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RootfolderId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1RootfolderIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1RootfolderId>>
  > = ({ signal }) => getApiV1RootfolderId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1RootfolderId>>,
    TError,
    TData
  >;
};

export type GetApiV1RootfolderIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1RootfolderId>>
>;
export type GetApiV1RootfolderIdQueryError = AxiosError<unknown>;

export const useGetApiV1RootfolderId = <
  TData = Awaited<ReturnType<typeof getApiV1RootfolderId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1RootfolderId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1RootfolderIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Search = (
  params?: MaybeRef<GetApiV1SearchParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SearchResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/search`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1SearchQueryKey = (
  params?: MaybeRef<GetApiV1SearchParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'search',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SearchQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Search>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1SearchParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Search>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SearchQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Search>>> = ({
    signal,
  }) => getApiV1Search(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Search>>,
    TError,
    TData
  >;
};

export type GetApiV1SearchQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Search>>
>;
export type GetApiV1SearchQueryError = AxiosError<unknown>;

export const useGetApiV1Search = <
  TData = Awaited<ReturnType<typeof getApiV1Search>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1SearchParams | undefined>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Search>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SearchQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Series = (
  params?: MaybeRef<GetApiV1SeriesParams>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SeriesResource[]>> => {
  params = unref(params);
  return axios.get(`http://localhost:3001/api/v1/series`, {
    ...options,
    params: { ...unref(params), ...options?.params },
  });
};

export const getGetApiV1SeriesQueryKey = (
  params?: MaybeRef<GetApiV1SeriesParams>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'series',
    ...(params ? [params] : []),
  ] as const;
};

export const getGetApiV1SeriesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Series>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1SeriesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Series>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SeriesQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Series>>> = ({
    signal,
  }) => getApiV1Series(params, { signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Series>>,
    TError,
    TData
  >;
};

export type GetApiV1SeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Series>>
>;
export type GetApiV1SeriesQueryError = AxiosError<unknown>;

export const useGetApiV1Series = <
  TData = Awaited<ReturnType<typeof getApiV1Series>>,
  TError = AxiosError<unknown>
>(
  params?: MaybeRef<GetApiV1SeriesParams>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1Series>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SeriesQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getContentPath = (
  path: MaybeRef<string | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  path = unref(path);
  return axios.get(`http://localhost:3001/content/${path}`, options);
};

export const getGetContentPathQueryKey = (
  path: MaybeRef<string | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'content', path] as const;
};

export const getGetContentPathQueryOptions = <
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = AxiosError<unknown>
>(
  path: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetContentPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getContentPath>>> = ({
    signal,
  }) => getContentPath(path, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(path)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getContentPath>>,
    TError,
    TData
  >;
};

export type GetContentPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getContentPath>>
>;
export type GetContentPathQueryError = AxiosError<unknown>;

export const useGetContentPath = <
  TData = Awaited<ReturnType<typeof getContentPath>>,
  TError = AxiosError<unknown>
>(
  path: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getContentPath>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetContentPathQueryOptions(path, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const get = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:3001/`, options);
};

export const getGetQueryKey = () => {
  return ['http:', 'localhost:3001'] as const;
};

export const getGetQueryOptions = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof get>>> = ({
    signal,
  }) => get({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof get>>,
    TError,
    TData
  >;
};

export type GetQueryResult = NonNullable<Awaited<ReturnType<typeof get>>>;
export type GetQueryError = AxiosError<unknown>;

export const useGet = <
  TData = Awaited<ReturnType<typeof get>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof get>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getPath = (
  path: MaybeRef<string | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  path = unref(path);
  return axios.get(`http://localhost:3001/${path}`, options);
};

export const getGetPathQueryKey = (
  path: MaybeRef<string | undefined | null>
) => {
  return ['http:', 'localhost:3001', path] as const;
};

export const getGetPathQueryOptions = <
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = AxiosError<unknown>
>(
  path: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetPathQueryKey(path);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPath>>> = ({
    signal,
  }) => getPath(path, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(path)),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>;
};

export type GetPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPath>>
>;
export type GetPathQueryError = AxiosError<unknown>;

export const useGetPath = <
  TData = Awaited<ReturnType<typeof getPath>>,
  TError = AxiosError<unknown>
>(
  path: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getPath>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPathQueryOptions(path, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1SystemStatus = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<SystemResource>> => {
  return axios.get(`http://localhost:3001/api/v1/system/status`, options);
};

export const getGetApiV1SystemStatusQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'system', 'status'] as const;
};

export const getGetApiV1SystemStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemStatus>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemStatus>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SystemStatusQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemStatus>>
  > = ({ signal }) => getApiV1SystemStatus({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemStatus>>,
    TError,
    TData
  >;
};

export type GetApiV1SystemStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemStatus>>
>;
export type GetApiV1SystemStatusQueryError = AxiosError<unknown>;

export const useGetApiV1SystemStatus = <
  TData = Awaited<ReturnType<typeof getApiV1SystemStatus>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemStatus>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SystemStatusQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1SystemRoutes = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`http://localhost:3001/api/v1/system/routes`, options);
};

export const getGetApiV1SystemRoutesQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'system', 'routes'] as const;
};

export const getGetApiV1SystemRoutesQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SystemRoutesQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemRoutes>>
  > = ({ signal }) => getApiV1SystemRoutes({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
    TError,
    TData
  >;
};

export type GetApiV1SystemRoutesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemRoutes>>
>;
export type GetApiV1SystemRoutesQueryError = AxiosError<unknown>;

export const useGetApiV1SystemRoutes = <
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutes>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SystemRoutesQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1SystemRoutesDuplicate = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(
    `http://localhost:3001/api/v1/system/routes/duplicate`,
    options
  );
};

export const getGetApiV1SystemRoutesDuplicateQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'system',
    'routes',
    'duplicate',
  ] as const;
};

export const getGetApiV1SystemRoutesDuplicateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SystemRoutesDuplicateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>
  > = ({ signal }) =>
    getApiV1SystemRoutesDuplicate({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
    TError,
    TData
  >;
};

export type GetApiV1SystemRoutesDuplicateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>
>;
export type GetApiV1SystemRoutesDuplicateQueryError = AxiosError<unknown>;

export const useGetApiV1SystemRoutesDuplicate = <
  TData = Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemRoutesDuplicate>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SystemRoutesDuplicateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1SystemShutdown = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/system/shutdown`,
    undefined,
    options
  );
};

export const getPostApiV1SystemShutdownMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
    void
  > = () => {
    return postApiV1SystemShutdown(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemShutdownMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemShutdown>>
>;

export type PostApiV1SystemShutdownMutationError = AxiosError<unknown>;

export const usePostApiV1SystemShutdown = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1SystemShutdown>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1SystemShutdownMutationOptions(options);

  return useMutation(mutationOptions);
};

export const postApiV1SystemRestart = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.post(
    `http://localhost:3001/api/v1/system/restart`,
    undefined,
    options
  );
};

export const getPostApiV1SystemRestartMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemRestart>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1SystemRestart>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1SystemRestart>>,
    void
  > = () => {
    return postApiV1SystemRestart(axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1SystemRestartMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1SystemRestart>>
>;

export type PostApiV1SystemRestartMutationError = AxiosError<unknown>;

export const usePostApiV1SystemRestart = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1SystemRestart>>,
    TError,
    void,
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1SystemRestart>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getPostApiV1SystemRestartMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1Tag = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TagResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/tag`, options);
};

export const getGetApiV1TagQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'tag'] as const;
};

export const getGetApiV1TagQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Tag>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tag>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1TagQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Tag>>> = ({
    signal,
  }) => getApiV1Tag({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Tag>>,
    TError,
    TData
  >;
};

export type GetApiV1TagQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Tag>>
>;
export type GetApiV1TagQueryError = AxiosError<unknown>;

export const useGetApiV1Tag = <
  TData = Awaited<ReturnType<typeof getApiV1Tag>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Tag>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1TagQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const postApiV1Tag = (
  tagResource: MaybeRef<TagResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TagResource>> => {
  tagResource = unref(tagResource);
  return axios.post(`http://localhost:3001/api/v1/tag`, tagResource, options);
};

export const getPostApiV1TagMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Tag>>,
    TError,
    { data: TagResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Tag>>,
  TError,
  { data: TagResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof postApiV1Tag>>,
    { data: TagResource }
  > = (props) => {
    const { data } = props ?? {};

    return postApiV1Tag(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PostApiV1TagMutationResult = NonNullable<
  Awaited<ReturnType<typeof postApiV1Tag>>
>;
export type PostApiV1TagMutationBody = TagResource;
export type PostApiV1TagMutationError = AxiosError<unknown>;

export const usePostApiV1Tag = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Tag>>,
    TError,
    { data: TagResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof postApiV1Tag>>,
  TError,
  { data: TagResource },
  TContext
> => {
  const mutationOptions = getPostApiV1TagMutationOptions(options);

  return useMutation(mutationOptions);
};

export const putApiV1TagId = (
  id: MaybeRef<string | undefined | null>,
  tagResource: MaybeRef<TagResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TagResource>> => {
  id = unref(id);
  tagResource = unref(tagResource);
  return axios.put(
    `http://localhost:3001/api/v1/tag/${id}`,
    tagResource,
    options
  );
};

export const getPutApiV1TagIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1TagId>>,
  TError,
  { id: string; data: TagResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1TagId>>,
    { id: string; data: TagResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1TagId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1TagId>>
>;
export type PutApiV1TagIdMutationBody = TagResource;
export type PutApiV1TagIdMutationError = AxiosError<unknown>;

export const usePutApiV1TagId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TagId>>,
    TError,
    { id: string; data: TagResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1TagId>>,
  TError,
  { id: string; data: TagResource },
  TContext
> => {
  const mutationOptions = getPutApiV1TagIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const deleteApiV1TagId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  id = unref(id);
  return axios.delete(`http://localhost:3001/api/v1/tag/${id}`, options);
};

export const getDeleteApiV1TagIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TagId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiV1TagId>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiV1TagId>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteApiV1TagId(id, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteApiV1TagIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiV1TagId>>
>;

export type DeleteApiV1TagIdMutationError = AxiosError<unknown>;

export const useDeleteApiV1TagId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiV1TagId>>,
    TError,
    { id: number },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof deleteApiV1TagId>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteApiV1TagIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1TagId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TagResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/tag/${id}`, options);
};

export const getGetApiV1TagIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'tag', id] as const;
};

export const getGetApiV1TagIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TagId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1TagId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1TagIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1TagId>>> = ({
    signal,
  }) => getApiV1TagId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TagId>>,
    TError,
    TData
  >;
};

export type GetApiV1TagIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TagId>>
>;
export type GetApiV1TagIdQueryError = AxiosError<unknown>;

export const useGetApiV1TagId = <
  TData = Awaited<ReturnType<typeof getApiV1TagId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getApiV1TagId>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1TagIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1TagDetail = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TagDetailsResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/tag/detail`, options);
};

export const getGetApiV1TagDetailQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'tag', 'detail'] as const;
};

export const getGetApiV1TagDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TagDetail>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1TagDetail>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1TagDetailQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1TagDetail>>
  > = ({ signal }) => getApiV1TagDetail({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TagDetail>>,
    TError,
    TData
  >;
};

export type GetApiV1TagDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TagDetail>>
>;
export type GetApiV1TagDetailQueryError = AxiosError<unknown>;

export const useGetApiV1TagDetail = <
  TData = Awaited<ReturnType<typeof getApiV1TagDetail>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1TagDetail>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1TagDetailQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1TagDetailId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TagDetailsResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/tag/detail/${id}`, options);
};

export const getGetApiV1TagDetailIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'tag', 'detail', id] as const;
};

export const getGetApiV1TagDetailIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TagDetailId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TagDetailId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1TagDetailIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1TagDetailId>>
  > = ({ signal }) => getApiV1TagDetailId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TagDetailId>>,
    TError,
    TData
  >;
};

export type GetApiV1TagDetailIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1TagDetailId>>
>;
export type GetApiV1TagDetailIdQueryError = AxiosError<unknown>;

export const useGetApiV1TagDetailId = <
  TData = Awaited<ReturnType<typeof getApiV1TagDetailId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1TagDetailId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1TagDetailIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1SystemTask = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TaskResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/system/task`, options);
};

export const getGetApiV1SystemTaskQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'system', 'task'] as const;
};

export const getGetApiV1SystemTaskQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemTask>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemTask>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SystemTaskQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemTask>>
  > = ({ signal }) => getApiV1SystemTask({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemTask>>,
    TError,
    TData
  >;
};

export type GetApiV1SystemTaskQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemTask>>
>;
export type GetApiV1SystemTaskQueryError = AxiosError<unknown>;

export const useGetApiV1SystemTask = <
  TData = Awaited<ReturnType<typeof getApiV1SystemTask>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1SystemTask>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SystemTaskQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1SystemTaskId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<TaskResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/system/task/${id}`, options);
};

export const getGetApiV1SystemTaskIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'system',
    'task',
    id,
  ] as const;
};

export const getGetApiV1SystemTaskIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1SystemTaskIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1SystemTaskId>>
  > = ({ signal }) => getApiV1SystemTaskId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
    TError,
    TData
  >;
};

export type GetApiV1SystemTaskIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1SystemTaskId>>
>;
export type GetApiV1SystemTaskIdQueryError = AxiosError<unknown>;

export const useGetApiV1SystemTaskId = <
  TData = Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1SystemTaskId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1SystemTaskIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const putApiV1ConfigUiId = (
  id: MaybeRef<string | undefined | null>,
  uiConfigResource: MaybeRef<UiConfigResource>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UiConfigResource>> => {
  id = unref(id);
  uiConfigResource = unref(uiConfigResource);
  return axios.put(
    `http://localhost:3001/api/v1/config/ui/${id}`,
    uiConfigResource,
    options
  );
};

export const getPutApiV1ConfigUiIdMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
  TError,
  { id: string; data: UiConfigResource },
  TContext
> => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
    { id: string; data: UiConfigResource }
  > = (props) => {
    const { id, data } = props ?? {};

    return putApiV1ConfigUiId(id, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type PutApiV1ConfigUiIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof putApiV1ConfigUiId>>
>;
export type PutApiV1ConfigUiIdMutationBody = UiConfigResource;
export type PutApiV1ConfigUiIdMutationError = AxiosError<unknown>;

export const usePutApiV1ConfigUiId = <
  TError = AxiosError<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
    TError,
    { id: string; data: UiConfigResource },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationReturnType<
  Awaited<ReturnType<typeof putApiV1ConfigUiId>>,
  TError,
  { id: string; data: UiConfigResource },
  TContext
> => {
  const mutationOptions = getPutApiV1ConfigUiIdMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getApiV1ConfigUiId = (
  id: MaybeRef<number | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UiConfigResource>> => {
  id = unref(id);
  return axios.get(`http://localhost:3001/api/v1/config/ui/${id}`, options);
};

export const getGetApiV1ConfigUiIdQueryKey = (
  id: MaybeRef<number | undefined | null>
) => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'config', 'ui', id] as const;
};

export const getGetApiV1ConfigUiIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigUiIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigUiId>>
  > = ({ signal }) => getApiV1ConfigUiId(id, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(id)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigUiIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigUiId>>
>;
export type GetApiV1ConfigUiIdQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigUiId = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
  TError = AxiosError<unknown>
>(
  id: MaybeRef<number | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1ConfigUiId>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigUiIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1ConfigUi = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UiConfigResource>> => {
  return axios.get(`http://localhost:3001/api/v1/config/ui`, options);
};

export const getGetApiV1ConfigUiQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'config', 'ui'] as const;
};

export const getGetApiV1ConfigUiQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigUi>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1ConfigUi>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1ConfigUiQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1ConfigUi>>
  > = ({ signal }) => getApiV1ConfigUi({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1ConfigUi>>,
    TError,
    TData
  >;
};

export type GetApiV1ConfigUiQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1ConfigUi>>
>;
export type GetApiV1ConfigUiQueryError = AxiosError<unknown>;

export const useGetApiV1ConfigUi = <
  TData = Awaited<ReturnType<typeof getApiV1ConfigUi>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1ConfigUi>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1ConfigUiQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1Update = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UpdateResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/update`, options);
};

export const getGetApiV1UpdateQueryKey = () => {
  return ['http:', 'localhost:3001', 'api', 'v1', 'update'] as const;
};

export const getGetApiV1UpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Update>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Update>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1UpdateQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Update>>> = ({
    signal,
  }) => getApiV1Update({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Update>>,
    TError,
    TData
  >;
};

export type GetApiV1UpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1Update>>
>;
export type GetApiV1UpdateQueryError = AxiosError<unknown>;

export const useGetApiV1Update = <
  TData = Awaited<ReturnType<typeof getApiV1Update>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getApiV1Update>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1UpdateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1LogFileUpdate = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LogFileResource[]>> => {
  return axios.get(`http://localhost:3001/api/v1/log/file/update`, options);
};

export const getGetApiV1LogFileUpdateQueryKey = () => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'log',
    'file',
    'update',
  ] as const;
};

export const getGetApiV1LogFileUpdateQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LogFileUpdateQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LogFileUpdate>>
  > = ({ signal }) => getApiV1LogFileUpdate({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
    TError,
    TData
  >;
};

export type GetApiV1LogFileUpdateQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFileUpdate>>
>;
export type GetApiV1LogFileUpdateQueryError = AxiosError<unknown>;

export const useGetApiV1LogFileUpdate = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getApiV1LogFileUpdate>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LogFileUpdateQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};

export const getApiV1LogFileUpdateFilename = (
  filename: MaybeRef<string | undefined | null>,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  filename = unref(filename);
  return axios.get(
    `http://localhost:3001/api/v1/log/file/update/${filename}`,
    options
  );
};

export const getGetApiV1LogFileUpdateFilenameQueryKey = (
  filename: MaybeRef<string | undefined | null>
) => {
  return [
    'http:',
    'localhost:3001',
    'api',
    'v1',
    'log',
    'file',
    'update',
    filename,
  ] as const;
};

export const getGetApiV1LogFileUpdateFilenameQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
  TError = AxiosError<unknown>
>(
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = getGetApiV1LogFileUpdateFilenameQueryKey(filename);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>
  > = ({ signal }) =>
    getApiV1LogFileUpdateFilename(filename, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: computed(() => !!unref(filename)),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
    TError,
    TData
  >;
};

export type GetApiV1LogFileUpdateFilenameQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>
>;
export type GetApiV1LogFileUpdateFilenameQueryError = AxiosError<unknown>;

export const useGetApiV1LogFileUpdateFilename = <
  TData = Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
  TError = AxiosError<unknown>
>(
  filename: MaybeRef<string | undefined | null>,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1LogFileUpdateFilename>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryReturnType<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApiV1LogFileUpdateFilenameQueryOptions(
    filename,
    options
  );

  const query = useQuery(queryOptions) as UseQueryReturnType<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = unref(queryOptions).queryKey as QueryKey;

  return query;
};
