/**
 * Generated by orval v6.29.1 üç∫
 * Do not edit manually.
 * Readarr
 * Readarr API docs
 * OpenAPI spec version: 1.0.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  ApiInfoResource,
  AuthorEditorResource,
  AuthorResource,
  BackupResource,
  BlocklistBulkResource,
  BlocklistResourcePagingResource,
  BookEditorResource,
  BookFileListResource,
  BookFileResource,
  BookResource,
  BookResourcePagingResource,
  BooksMonitoredResource,
  BookshelfResource,
  CommandResource,
  CustomFilterResource,
  CustomFormatResource,
  DelayProfileResource,
  DeleteApiV1AuthorIdParams,
  DeleteApiV1BookIdParams,
  DeleteApiV1QueueBulkParams,
  DeleteApiV1QueueIdParams,
  DevelopmentConfigResource,
  DiskSpaceResource,
  DownloadClientBulkResource,
  DownloadClientConfigResource,
  DownloadClientResource,
  EditionResource,
  GetApiV1AuthorLookupParams,
  GetApiV1BlocklistParams,
  GetApiV1BookLookupParams,
  GetApiV1BookParams,
  GetApiV1BookfileParams,
  GetApiV1CalendarParams,
  GetApiV1ConfigNamingExamplesParams,
  GetApiV1EditionParams,
  GetApiV1FilesystemMediafilesParams,
  GetApiV1FilesystemParams,
  GetApiV1FilesystemTypeParams,
  GetApiV1HistoryAuthorParams,
  GetApiV1HistoryParams,
  GetApiV1HistorySinceParams,
  GetApiV1LogParams,
  GetApiV1ManualimportParams,
  GetApiV1ParseParams,
  GetApiV1QueueDetailsParams,
  GetApiV1QueueParams,
  GetApiV1ReleaseParams,
  GetApiV1RenameParams,
  GetApiV1RetagParams,
  GetApiV1SearchParams,
  GetApiV1SeriesParams,
  GetApiV1WantedCutoffParams,
  GetApiV1WantedMissingParams,
  GetFeedV1CalendarReadarrIcsParams,
  HealthResource,
  HistoryResource,
  HistoryResourcePagingResource,
  HostConfigResource,
  ImportListBulkResource,
  ImportListExclusionResource,
  ImportListResource,
  IndexerBulkResource,
  IndexerConfigResource,
  IndexerFlagResource,
  IndexerResource,
  LanguageResource,
  LogFileResource,
  LogResourcePagingResource,
  ManualImportResource,
  ManualImportUpdateResource,
  MediaManagementConfigResource,
  MetadataProfileResource,
  MetadataProviderConfigResource,
  MetadataResource,
  NamingConfigResource,
  NotificationResource,
  ParseResource,
  PingResource,
  PostApiV1DownloadclientParams,
  PostApiV1DownloadclientTestParams,
  PostApiV1ImportlistParams,
  PostApiV1ImportlistTestParams,
  PostApiV1IndexerParams,
  PostApiV1IndexerTestParams,
  PostApiV1MetadataParams,
  PostApiV1MetadataTestParams,
  PostApiV1NotificationParams,
  PostApiV1NotificationTestParams,
  PostLoginBody,
  PostLoginParams,
  PutApiV1AuthorIdParams,
  PutApiV1DelayprofileReorderIdParams,
  PutApiV1DownloadclientIdParams,
  PutApiV1ImportlistIdParams,
  PutApiV1IndexerIdParams,
  PutApiV1MetadataIdParams,
  PutApiV1NotificationIdParams,
  QualityDefinitionResource,
  QualityProfileResource,
  QueueBulkResource,
  QueueResource,
  QueueResourcePagingResource,
  QueueStatusResource,
  ReleaseProfileResource,
  ReleaseResource,
  RemotePathMappingResource,
  RenameBookResource,
  RetagBookResource,
  RootFolderResource,
  SeriesResource,
  SystemResource,
  TagDetailsResource,
  TagResource,
  TaskResource,
  UiConfigResource,
  UpdateResource,
} from "./models";

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
  T
>() => T extends Y ? 1 : 2
  ? A
  : B;

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >;
}[keyof T];

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P];
    }
  : DistributeReadOnlyOverUnions<T>;

export const getApi = <TData = AxiosResponse<ApiInfoResource>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api`, options);
};

export const postLogin = <TData = AxiosResponse<void>>(
  postLoginBody: PostLoginBody,
  params?: PostLoginParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  const formData = new FormData();
  if (postLoginBody.username !== undefined) {
    formData.append("username", postLoginBody.username);
  }
  if (postLoginBody.password !== undefined) {
    formData.append("password", postLoginBody.password);
  }
  if (postLoginBody.rememberMe !== undefined) {
    formData.append("rememberMe", postLoginBody.rememberMe);
  }

  return axios.post(`http://localhost:3001/login`, formData, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getLogin = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/login`, options);
};

export const getLogout = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/logout`, options);
};

export const getApiV1Author = <TData = AxiosResponse<AuthorResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/author`, options);
};

export const postApiV1Author = <TData = AxiosResponse<AuthorResource>>(
  authorResource: NonReadonly<AuthorResource>,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/author`,
    authorResource,
    options
  );
};

export const putApiV1AuthorId = <TData = AxiosResponse<AuthorResource>>(
  id: string | undefined | null,
  authorResource: NonReadonly<AuthorResource>,
  params?: PutApiV1AuthorIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/author/${id}`,
    authorResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const deleteApiV1AuthorId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  params?: DeleteApiV1AuthorIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/author/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1AuthorId = <TData = AxiosResponse<AuthorResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/author/${id}`, options);
};

export const putApiV1AuthorEditor = <TData = AxiosResponse<void>>(
  authorEditorResource: AuthorEditorResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/author/editor`,
    authorEditorResource,
    options
  );
};

export const deleteApiV1AuthorEditor = <TData = AxiosResponse<void>>(
  authorEditorResource: AuthorEditorResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/author/editor`, {
    data: authorEditorResource,
    ...options,
  });
};

export const getApiV1AuthorLookup = <TData = AxiosResponse<void>>(
  params?: GetApiV1AuthorLookupParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/author/lookup`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1SystemBackup = <TData = AxiosResponse<BackupResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/system/backup`, options);
};

export const deleteApiV1SystemBackupId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/system/backup/${id}`,
    options
  );
};

export const postApiV1SystemBackupRestoreId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/system/backup/restore/${id}`,
    undefined,
    options
  );
};

export const postApiV1SystemBackupRestoreUpload = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/system/backup/restore/upload`,
    undefined,
    options
  );
};

export const getApiV1Blocklist = <
  TData = AxiosResponse<BlocklistResourcePagingResource>
>(
  params?: GetApiV1BlocklistParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/blocklist`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const deleteApiV1BlocklistId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/blocklist/${id}`, options);
};

export const deleteApiV1BlocklistBulk = <TData = AxiosResponse<void>>(
  blocklistBulkResource: BlocklistBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/blocklist/bulk`, {
    data: blocklistBulkResource,
    ...options,
  });
};

export const getApiV1Book = <TData = AxiosResponse<BookResource[]>>(
  params?: GetApiV1BookParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/book`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postApiV1Book = <TData = AxiosResponse<BookResource>>(
  bookResource: BookResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`http://localhost:3001/api/v1/book`, bookResource, options);
};

export const getApiV1BookIdOverview = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/book/${id}/overview`, options);
};

export const putApiV1BookId = <TData = AxiosResponse<BookResource>>(
  id: string | undefined | null,
  bookResource: BookResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/book/${id}`,
    bookResource,
    options
  );
};

export const deleteApiV1BookId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  params?: DeleteApiV1BookIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/book/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1BookId = <TData = AxiosResponse<BookResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/book/${id}`, options);
};

export const putApiV1BookMonitor = <TData = AxiosResponse<void>>(
  booksMonitoredResource: BooksMonitoredResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/book/monitor`,
    booksMonitoredResource,
    options
  );
};

export const putApiV1BookEditor = <TData = AxiosResponse<void>>(
  bookEditorResource: BookEditorResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/book/editor`,
    bookEditorResource,
    options
  );
};

export const deleteApiV1BookEditor = <TData = AxiosResponse<void>>(
  bookEditorResource: BookEditorResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/book/editor`, {
    data: bookEditorResource,
    ...options,
  });
};

export const getApiV1Bookfile = <TData = AxiosResponse<BookFileResource[]>>(
  params?: GetApiV1BookfileParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/bookfile`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const putApiV1BookfileId = <TData = AxiosResponse<BookFileResource>>(
  id: string | undefined | null,
  bookFileResource: BookFileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/bookfile/${id}`,
    bookFileResource,
    options
  );
};

export const deleteApiV1BookfileId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/bookfile/${id}`, options);
};

export const getApiV1BookfileId = <TData = AxiosResponse<BookFileResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/bookfile/${id}`, options);
};

export const putApiV1BookfileEditor = <TData = AxiosResponse<void>>(
  bookFileListResource: BookFileListResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/bookfile/editor`,
    bookFileListResource,
    options
  );
};

export const deleteApiV1BookfileBulk = <TData = AxiosResponse<void>>(
  bookFileListResource: BookFileListResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/bookfile/bulk`, {
    data: bookFileListResource,
    ...options,
  });
};

export const getApiV1BookLookup = <TData = AxiosResponse<void>>(
  params?: GetApiV1BookLookupParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/book/lookup`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postApiV1Bookshelf = <TData = AxiosResponse<void>>(
  bookshelfResource: BookshelfResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/bookshelf`,
    bookshelfResource,
    options
  );
};

export const getApiV1Calendar = <TData = AxiosResponse<BookResource[]>>(
  params?: GetApiV1CalendarParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/calendar`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1CalendarId = <TData = AxiosResponse<BookResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/calendar/${id}`, options);
};

export const getFeedV1CalendarReadarrIcs = <TData = AxiosResponse<void>>(
  params?: GetFeedV1CalendarReadarrIcsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/feed/v1/calendar/readarr.ics`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postApiV1Command = <TData = AxiosResponse<CommandResource>>(
  commandResource: CommandResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/command`,
    commandResource,
    options
  );
};

export const getApiV1Command = <TData = AxiosResponse<CommandResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/command`, options);
};

export const deleteApiV1CommandId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/command/${id}`, options);
};

export const getApiV1CommandId = <TData = AxiosResponse<CommandResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/command/${id}`, options);
};

export const getApiV1Customfilter = <
  TData = AxiosResponse<CustomFilterResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/customfilter`, options);
};

export const postApiV1Customfilter = <
  TData = AxiosResponse<CustomFilterResource>
>(
  customFilterResource: CustomFilterResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/customfilter`,
    customFilterResource,
    options
  );
};

export const putApiV1CustomfilterId = <
  TData = AxiosResponse<CustomFilterResource>
>(
  id: string | undefined | null,
  customFilterResource: CustomFilterResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/customfilter/${id}`,
    customFilterResource,
    options
  );
};

export const deleteApiV1CustomfilterId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/customfilter/${id}`,
    options
  );
};

export const getApiV1CustomfilterId = <
  TData = AxiosResponse<CustomFilterResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/customfilter/${id}`, options);
};

export const postApiV1Customformat = <
  TData = AxiosResponse<CustomFormatResource>
>(
  customFormatResource: CustomFormatResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/customformat`,
    customFormatResource,
    options
  );
};

export const getApiV1Customformat = <
  TData = AxiosResponse<CustomFormatResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/customformat`, options);
};

export const putApiV1CustomformatId = <
  TData = AxiosResponse<CustomFormatResource>
>(
  id: string | undefined | null,
  customFormatResource: CustomFormatResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/customformat/${id}`,
    customFormatResource,
    options
  );
};

export const deleteApiV1CustomformatId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/customformat/${id}`,
    options
  );
};

export const getApiV1CustomformatId = <
  TData = AxiosResponse<CustomFormatResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/customformat/${id}`, options);
};

export const getApiV1CustomformatSchema = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/customformat/schema`, options);
};

export const getApiV1WantedCutoff = <
  TData = AxiosResponse<BookResourcePagingResource>
>(
  params?: GetApiV1WantedCutoffParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/wanted/cutoff`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1WantedCutoffId = <TData = AxiosResponse<BookResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/wanted/cutoff/${id}`, options);
};

export const postApiV1Delayprofile = <
  TData = AxiosResponse<DelayProfileResource>
>(
  delayProfileResource: DelayProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/delayprofile`,
    delayProfileResource,
    options
  );
};

export const getApiV1Delayprofile = <
  TData = AxiosResponse<DelayProfileResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/delayprofile`, options);
};

export const deleteApiV1DelayprofileId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/delayprofile/${id}`,
    options
  );
};

export const putApiV1DelayprofileId = <
  TData = AxiosResponse<DelayProfileResource>
>(
  id: string | undefined | null,
  delayProfileResource: DelayProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/delayprofile/${id}`,
    delayProfileResource,
    options
  );
};

export const getApiV1DelayprofileId = <
  TData = AxiosResponse<DelayProfileResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/delayprofile/${id}`, options);
};

export const putApiV1DelayprofileReorderId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  params?: PutApiV1DelayprofileReorderIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/delayprofile/reorder/${id}`,
    undefined,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const getApiV1ConfigDevelopment = <
  TData = AxiosResponse<DevelopmentConfigResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/development`, options);
};

export const putApiV1ConfigDevelopmentId = <
  TData = AxiosResponse<DevelopmentConfigResource>
>(
  id: string | undefined | null,
  developmentConfigResource: DevelopmentConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/development/${id}`,
    developmentConfigResource,
    options
  );
};

export const getApiV1ConfigDevelopmentId = <
  TData = AxiosResponse<DevelopmentConfigResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/development/${id}`,
    options
  );
};

export const getApiV1Diskspace = <TData = AxiosResponse<DiskSpaceResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/diskspace`, options);
};

export const getApiV1Downloadclient = <
  TData = AxiosResponse<DownloadClientResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/downloadclient`, options);
};

export const postApiV1Downloadclient = <
  TData = AxiosResponse<DownloadClientResource>
>(
  downloadClientResource: DownloadClientResource,
  params?: PostApiV1DownloadclientParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient`,
    downloadClientResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const putApiV1DownloadclientId = <
  TData = AxiosResponse<DownloadClientResource>
>(
  id: string | undefined | null,
  downloadClientResource: DownloadClientResource,
  params?: PutApiV1DownloadclientIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/downloadclient/${id}`,
    downloadClientResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const deleteApiV1DownloadclientId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/downloadclient/${id}`,
    options
  );
};

export const getApiV1DownloadclientId = <
  TData = AxiosResponse<DownloadClientResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/downloadclient/${id}`,
    options
  );
};

export const putApiV1DownloadclientBulk = <
  TData = AxiosResponse<DownloadClientResource>
>(
  downloadClientBulkResource: DownloadClientBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/downloadclient/bulk`,
    downloadClientBulkResource,
    options
  );
};

export const deleteApiV1DownloadclientBulk = <TData = AxiosResponse<void>>(
  downloadClientBulkResource: DownloadClientBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/downloadclient/bulk`, {
    data: downloadClientBulkResource,
    ...options,
  });
};

export const getApiV1DownloadclientSchema = <
  TData = AxiosResponse<DownloadClientResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/downloadclient/schema`,
    options
  );
};

export const postApiV1DownloadclientTest = <TData = AxiosResponse<void>>(
  downloadClientResource: DownloadClientResource,
  params?: PostApiV1DownloadclientTestParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient/test`,
    downloadClientResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const postApiV1DownloadclientTestall = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient/testall`,
    undefined,
    options
  );
};

export const postApiV1DownloadclientActionName = <TData = AxiosResponse<void>>(
  name: string | undefined | null,
  downloadClientResource: DownloadClientResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/downloadclient/action/${name}`,
    downloadClientResource,
    options
  );
};

export const getApiV1ConfigDownloadclient = <
  TData = AxiosResponse<DownloadClientConfigResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/downloadclient`,
    options
  );
};

export const putApiV1ConfigDownloadclientId = <
  TData = AxiosResponse<DownloadClientConfigResource>
>(
  id: string | undefined | null,
  downloadClientConfigResource: DownloadClientConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/downloadclient/${id}`,
    downloadClientConfigResource,
    options
  );
};

export const getApiV1ConfigDownloadclientId = <
  TData = AxiosResponse<DownloadClientConfigResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/downloadclient/${id}`,
    options
  );
};

export const getApiV1Edition = <TData = AxiosResponse<EditionResource[]>>(
  params?: GetApiV1EditionParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/edition`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1Filesystem = <TData = AxiosResponse<void>>(
  params?: GetApiV1FilesystemParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/filesystem`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1FilesystemType = <TData = AxiosResponse<void>>(
  params?: GetApiV1FilesystemTypeParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/filesystem/type`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1FilesystemMediafiles = <TData = AxiosResponse<void>>(
  params?: GetApiV1FilesystemMediafilesParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/filesystem/mediafiles`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1Health = <TData = AxiosResponse<HealthResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/health`, options);
};

export const getApiV1History = <
  TData = AxiosResponse<HistoryResourcePagingResource>
>(
  params?: GetApiV1HistoryParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/history`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1HistorySince = <TData = AxiosResponse<HistoryResource[]>>(
  params?: GetApiV1HistorySinceParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/history/since`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1HistoryAuthor = <TData = AxiosResponse<HistoryResource[]>>(
  params?: GetApiV1HistoryAuthorParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/history/author`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postApiV1HistoryFailedId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/history/failed/${id}`,
    undefined,
    options
  );
};

export const getApiV1ConfigHost = <TData = AxiosResponse<HostConfigResource>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/host`, options);
};

export const putApiV1ConfigHostId = <TData = AxiosResponse<HostConfigResource>>(
  id: string | undefined | null,
  hostConfigResource: HostConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/host/${id}`,
    hostConfigResource,
    options
  );
};

export const getApiV1ConfigHostId = <TData = AxiosResponse<HostConfigResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/host/${id}`, options);
};

export const getApiV1Importlist = <TData = AxiosResponse<ImportListResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/importlist`, options);
};

export const postApiV1Importlist = <TData = AxiosResponse<ImportListResource>>(
  importListResource: ImportListResource,
  params?: PostApiV1ImportlistParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/importlist`,
    importListResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const putApiV1ImportlistId = <TData = AxiosResponse<ImportListResource>>(
  id: string | undefined | null,
  importListResource: ImportListResource,
  params?: PutApiV1ImportlistIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/importlist/${id}`,
    importListResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const deleteApiV1ImportlistId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/importlist/${id}`, options);
};

export const getApiV1ImportlistId = <TData = AxiosResponse<ImportListResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/importlist/${id}`, options);
};

export const putApiV1ImportlistBulk = <
  TData = AxiosResponse<ImportListResource>
>(
  importListBulkResource: ImportListBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/importlist/bulk`,
    importListBulkResource,
    options
  );
};

export const deleteApiV1ImportlistBulk = <TData = AxiosResponse<void>>(
  importListBulkResource: ImportListBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/importlist/bulk`, {
    data: importListBulkResource,
    ...options,
  });
};

export const getApiV1ImportlistSchema = <
  TData = AxiosResponse<ImportListResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/importlist/schema`, options);
};

export const postApiV1ImportlistTest = <TData = AxiosResponse<void>>(
  importListResource: ImportListResource,
  params?: PostApiV1ImportlistTestParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/importlist/test`,
    importListResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const postApiV1ImportlistTestall = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/importlist/testall`,
    undefined,
    options
  );
};

export const postApiV1ImportlistActionName = <TData = AxiosResponse<void>>(
  name: string | undefined | null,
  importListResource: ImportListResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/importlist/action/${name}`,
    importListResource,
    options
  );
};

export const getApiV1Importlistexclusion = <
  TData = AxiosResponse<ImportListExclusionResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/importlistexclusion`, options);
};

export const postApiV1Importlistexclusion = <
  TData = AxiosResponse<ImportListExclusionResource>
>(
  importListExclusionResource: ImportListExclusionResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/importlistexclusion`,
    importListExclusionResource,
    options
  );
};

export const putApiV1ImportlistexclusionId = <
  TData = AxiosResponse<ImportListExclusionResource>
>(
  id: string | undefined | null,
  importListExclusionResource: ImportListExclusionResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/importlistexclusion/${id}`,
    importListExclusionResource,
    options
  );
};

export const deleteApiV1ImportlistexclusionId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/importlistexclusion/${id}`,
    options
  );
};

export const getApiV1ImportlistexclusionId = <
  TData = AxiosResponse<ImportListExclusionResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/importlistexclusion/${id}`,
    options
  );
};

export const getApiV1Indexer = <TData = AxiosResponse<IndexerResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/indexer`, options);
};

export const postApiV1Indexer = <TData = AxiosResponse<IndexerResource>>(
  indexerResource: IndexerResource,
  params?: PostApiV1IndexerParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`http://localhost:3001/api/v1/indexer`, indexerResource, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const putApiV1IndexerId = <TData = AxiosResponse<IndexerResource>>(
  id: string | undefined | null,
  indexerResource: IndexerResource,
  params?: PutApiV1IndexerIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/indexer/${id}`,
    indexerResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const deleteApiV1IndexerId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/indexer/${id}`, options);
};

export const getApiV1IndexerId = <TData = AxiosResponse<IndexerResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/indexer/${id}`, options);
};

export const putApiV1IndexerBulk = <TData = AxiosResponse<IndexerResource>>(
  indexerBulkResource: IndexerBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/indexer/bulk`,
    indexerBulkResource,
    options
  );
};

export const deleteApiV1IndexerBulk = <TData = AxiosResponse<void>>(
  indexerBulkResource: IndexerBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/indexer/bulk`, {
    data: indexerBulkResource,
    ...options,
  });
};

export const getApiV1IndexerSchema = <TData = AxiosResponse<IndexerResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/indexer/schema`, options);
};

export const postApiV1IndexerTest = <TData = AxiosResponse<void>>(
  indexerResource: IndexerResource,
  params?: PostApiV1IndexerTestParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/indexer/test`,
    indexerResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const postApiV1IndexerTestall = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/indexer/testall`,
    undefined,
    options
  );
};

export const postApiV1IndexerActionName = <TData = AxiosResponse<void>>(
  name: string | undefined | null,
  indexerResource: IndexerResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/indexer/action/${name}`,
    indexerResource,
    options
  );
};

export const getApiV1ConfigIndexer = <
  TData = AxiosResponse<IndexerConfigResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/indexer`, options);
};

export const putApiV1ConfigIndexerId = <
  TData = AxiosResponse<IndexerConfigResource>
>(
  id: string | undefined | null,
  indexerConfigResource: IndexerConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/indexer/${id}`,
    indexerConfigResource,
    options
  );
};

export const getApiV1ConfigIndexerId = <
  TData = AxiosResponse<IndexerConfigResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/indexer/${id}`,
    options
  );
};

export const getApiV1Indexerflag = <
  TData = AxiosResponse<IndexerFlagResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/indexerflag`, options);
};

export const getApiV1Language = <TData = AxiosResponse<LanguageResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/language`, options);
};

export const getApiV1LanguageId = <TData = AxiosResponse<LanguageResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/language/${id}`, options);
};

export const getApiV1Localization = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/localization`, options);
};

export const getApiV1Log = <TData = AxiosResponse<LogResourcePagingResource>>(
  params?: GetApiV1LogParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/log`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1LogFile = <TData = AxiosResponse<LogFileResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/log/file`, options);
};

export const getApiV1LogFileFilename = <TData = AxiosResponse<void>>(
  filename: string | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/log/file/${filename}`,
    options
  );
};

export const postApiV1Manualimport = <TData = AxiosResponse<void>>(
  manualImportUpdateResource: ManualImportUpdateResource[],
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/manualimport`,
    manualImportUpdateResource,
    options
  );
};

export const getApiV1Manualimport = <
  TData = AxiosResponse<ManualImportResource[]>
>(
  params?: GetApiV1ManualimportParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/manualimport`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1MediacoverAuthorAuthorIdFilename = <
  TData = AxiosResponse<void>
>(
  authorId: number | undefined | null,
  filename: string | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/mediacover/author/${authorId}/${filename}`,
    options
  );
};

export const getApiV1MediacoverBookBookIdFilename = <
  TData = AxiosResponse<void>
>(
  bookId: number | undefined | null,
  filename: string | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/mediacover/book/${bookId}/${filename}`,
    options
  );
};

export const getApiV1ConfigMediamanagement = <
  TData = AxiosResponse<MediaManagementConfigResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/mediamanagement`,
    options
  );
};

export const putApiV1ConfigMediamanagementId = <
  TData = AxiosResponse<MediaManagementConfigResource>
>(
  id: string | undefined | null,
  mediaManagementConfigResource: MediaManagementConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/mediamanagement/${id}`,
    mediaManagementConfigResource,
    options
  );
};

export const getApiV1ConfigMediamanagementId = <
  TData = AxiosResponse<MediaManagementConfigResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/mediamanagement/${id}`,
    options
  );
};

export const getApiV1Metadata = <TData = AxiosResponse<MetadataResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/metadata`, options);
};

export const postApiV1Metadata = <TData = AxiosResponse<MetadataResource>>(
  metadataResource: MetadataResource,
  params?: PostApiV1MetadataParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`http://localhost:3001/api/v1/metadata`, metadataResource, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const putApiV1MetadataId = <TData = AxiosResponse<MetadataResource>>(
  id: string | undefined | null,
  metadataResource: MetadataResource,
  params?: PutApiV1MetadataIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/metadata/${id}`,
    metadataResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const deleteApiV1MetadataId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/metadata/${id}`, options);
};

export const getApiV1MetadataId = <TData = AxiosResponse<MetadataResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/metadata/${id}`, options);
};

export const getApiV1MetadataSchema = <
  TData = AxiosResponse<MetadataResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/metadata/schema`, options);
};

export const postApiV1MetadataTest = <TData = AxiosResponse<void>>(
  metadataResource: MetadataResource,
  params?: PostApiV1MetadataTestParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/metadata/test`,
    metadataResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const postApiV1MetadataTestall = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/metadata/testall`,
    undefined,
    options
  );
};

export const postApiV1MetadataActionName = <TData = AxiosResponse<void>>(
  name: string | undefined | null,
  metadataResource: MetadataResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/metadata/action/${name}`,
    metadataResource,
    options
  );
};

export const postApiV1Metadataprofile = <
  TData = AxiosResponse<MetadataProfileResource>
>(
  metadataProfileResource: MetadataProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/metadataprofile`,
    metadataProfileResource,
    options
  );
};

export const getApiV1Metadataprofile = <
  TData = AxiosResponse<MetadataProfileResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/metadataprofile`, options);
};

export const deleteApiV1MetadataprofileId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/metadataprofile/${id}`,
    options
  );
};

export const putApiV1MetadataprofileId = <
  TData = AxiosResponse<MetadataProfileResource>
>(
  id: string | undefined | null,
  metadataProfileResource: MetadataProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/metadataprofile/${id}`,
    metadataProfileResource,
    options
  );
};

export const getApiV1MetadataprofileId = <
  TData = AxiosResponse<MetadataProfileResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/metadataprofile/${id}`,
    options
  );
};

export const getApiV1MetadataprofileSchema = <
  TData = AxiosResponse<MetadataProfileResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/metadataprofile/schema`,
    options
  );
};

export const getApiV1ConfigMetadataprovider = <
  TData = AxiosResponse<MetadataProviderConfigResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/metadataprovider`,
    options
  );
};

export const putApiV1ConfigMetadataproviderId = <
  TData = AxiosResponse<MetadataProviderConfigResource>
>(
  id: string | undefined | null,
  metadataProviderConfigResource: MetadataProviderConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/metadataprovider/${id}`,
    metadataProviderConfigResource,
    options
  );
};

export const getApiV1ConfigMetadataproviderId = <
  TData = AxiosResponse<MetadataProviderConfigResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/config/metadataprovider/${id}`,
    options
  );
};

export const getApiV1WantedMissing = <
  TData = AxiosResponse<BookResourcePagingResource>
>(
  params?: GetApiV1WantedMissingParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/wanted/missing`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1WantedMissingId = <TData = AxiosResponse<BookResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/wanted/missing/${id}`,
    options
  );
};

export const getApiV1ConfigNaming = <
  TData = AxiosResponse<NamingConfigResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/naming`, options);
};

export const putApiV1ConfigNamingId = <
  TData = AxiosResponse<NamingConfigResource>
>(
  id: string | undefined | null,
  namingConfigResource: NamingConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/naming/${id}`,
    namingConfigResource,
    options
  );
};

export const getApiV1ConfigNamingId = <
  TData = AxiosResponse<NamingConfigResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/naming/${id}`, options);
};

export const getApiV1ConfigNamingExamples = <TData = AxiosResponse<void>>(
  params?: GetApiV1ConfigNamingExamplesParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/naming/examples`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1Notification = <
  TData = AxiosResponse<NotificationResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/notification`, options);
};

export const postApiV1Notification = <
  TData = AxiosResponse<NotificationResource>
>(
  notificationResource: NotificationResource,
  params?: PostApiV1NotificationParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/notification`,
    notificationResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const putApiV1NotificationId = <
  TData = AxiosResponse<NotificationResource>
>(
  id: string | undefined | null,
  notificationResource: NotificationResource,
  params?: PutApiV1NotificationIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/notification/${id}`,
    notificationResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const deleteApiV1NotificationId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/notification/${id}`,
    options
  );
};

export const getApiV1NotificationId = <
  TData = AxiosResponse<NotificationResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/notification/${id}`, options);
};

export const getApiV1NotificationSchema = <
  TData = AxiosResponse<NotificationResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/notification/schema`, options);
};

export const postApiV1NotificationTest = <TData = AxiosResponse<void>>(
  notificationResource: NotificationResource,
  params?: PostApiV1NotificationTestParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/notification/test`,
    notificationResource,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const postApiV1NotificationTestall = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/notification/testall`,
    undefined,
    options
  );
};

export const postApiV1NotificationActionName = <TData = AxiosResponse<void>>(
  name: string | undefined | null,
  notificationResource: NotificationResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/notification/action/${name}`,
    notificationResource,
    options
  );
};

export const getApiV1Parse = <TData = AxiosResponse<ParseResource>>(
  params?: GetApiV1ParseParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/parse`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getPing = <TData = AxiosResponse<PingResource>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/ping`, options);
};

export const headPing = <TData = AxiosResponse<PingResource>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.head(`http://localhost:3001/ping`, options);
};

export const putApiV1QualitydefinitionId = <
  TData = AxiosResponse<QualityDefinitionResource>
>(
  id: string | undefined | null,
  qualityDefinitionResource: QualityDefinitionResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/qualitydefinition/${id}`,
    qualityDefinitionResource,
    options
  );
};

export const getApiV1QualitydefinitionId = <
  TData = AxiosResponse<QualityDefinitionResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/qualitydefinition/${id}`,
    options
  );
};

export const getApiV1Qualitydefinition = <
  TData = AxiosResponse<QualityDefinitionResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/qualitydefinition`, options);
};

export const putApiV1QualitydefinitionUpdate = <TData = AxiosResponse<void>>(
  qualityDefinitionResource: QualityDefinitionResource[],
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/qualitydefinition/update`,
    qualityDefinitionResource,
    options
  );
};

export const postApiV1Qualityprofile = <
  TData = AxiosResponse<QualityProfileResource>
>(
  qualityProfileResource: QualityProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/qualityprofile`,
    qualityProfileResource,
    options
  );
};

export const getApiV1Qualityprofile = <
  TData = AxiosResponse<QualityProfileResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/qualityprofile`, options);
};

export const deleteApiV1QualityprofileId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/qualityprofile/${id}`,
    options
  );
};

export const putApiV1QualityprofileId = <
  TData = AxiosResponse<QualityProfileResource>
>(
  id: string | undefined | null,
  qualityProfileResource: QualityProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/qualityprofile/${id}`,
    qualityProfileResource,
    options
  );
};

export const getApiV1QualityprofileId = <
  TData = AxiosResponse<QualityProfileResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/qualityprofile/${id}`,
    options
  );
};

export const getApiV1QualityprofileSchema = <
  TData = AxiosResponse<QualityProfileResource>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/qualityprofile/schema`,
    options
  );
};

export const deleteApiV1QueueId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  params?: DeleteApiV1QueueIdParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/queue/${id}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const deleteApiV1QueueBulk = <TData = AxiosResponse<void>>(
  queueBulkResource: QueueBulkResource,
  params?: DeleteApiV1QueueBulkParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/queue/bulk`, {
    data: queueBulkResource,
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1Queue = <
  TData = AxiosResponse<QueueResourcePagingResource>
>(
  params?: GetApiV1QueueParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/queue`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postApiV1QueueGrabId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/queue/grab/${id}`,
    undefined,
    options
  );
};

export const postApiV1QueueGrabBulk = <TData = AxiosResponse<void>>(
  queueBulkResource: QueueBulkResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/queue/grab/bulk`,
    queueBulkResource,
    options
  );
};

export const getApiV1QueueDetails = <TData = AxiosResponse<QueueResource[]>>(
  params?: GetApiV1QueueDetailsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/queue/details`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1QueueStatus = <TData = AxiosResponse<QueueStatusResource>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/queue/status`, options);
};

export const postApiV1Release = <TData = AxiosResponse<ReleaseResource>>(
  releaseResource: ReleaseResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/release`,
    releaseResource,
    options
  );
};

export const getApiV1Release = <TData = AxiosResponse<ReleaseResource[]>>(
  params?: GetApiV1ReleaseParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/release`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1Releaseprofile = <
  TData = AxiosResponse<ReleaseProfileResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/releaseprofile`, options);
};

export const postApiV1Releaseprofile = <
  TData = AxiosResponse<ReleaseProfileResource>
>(
  releaseProfileResource: ReleaseProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/releaseprofile`,
    releaseProfileResource,
    options
  );
};

export const putApiV1ReleaseprofileId = <
  TData = AxiosResponse<ReleaseProfileResource>
>(
  id: string | undefined | null,
  releaseProfileResource: ReleaseProfileResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/releaseprofile/${id}`,
    releaseProfileResource,
    options
  );
};

export const deleteApiV1ReleaseprofileId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/releaseprofile/${id}`,
    options
  );
};

export const getApiV1ReleaseprofileId = <
  TData = AxiosResponse<ReleaseProfileResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/releaseprofile/${id}`,
    options
  );
};

export const postApiV1ReleasePush = <TData = AxiosResponse<ReleaseResource>>(
  releaseResource: ReleaseResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/release/push`,
    releaseResource,
    options
  );
};

export const postApiV1Remotepathmapping = <
  TData = AxiosResponse<RemotePathMappingResource>
>(
  remotePathMappingResource: RemotePathMappingResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/remotepathmapping`,
    remotePathMappingResource,
    options
  );
};

export const getApiV1Remotepathmapping = <
  TData = AxiosResponse<RemotePathMappingResource[]>
>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/remotepathmapping`, options);
};

export const deleteApiV1RemotepathmappingId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `http://localhost:3001/api/v1/remotepathmapping/${id}`,
    options
  );
};

export const putApiV1RemotepathmappingId = <
  TData = AxiosResponse<RemotePathMappingResource>
>(
  id: string | undefined | null,
  remotePathMappingResource: RemotePathMappingResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/remotepathmapping/${id}`,
    remotePathMappingResource,
    options
  );
};

export const getApiV1RemotepathmappingId = <
  TData = AxiosResponse<RemotePathMappingResource>
>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/remotepathmapping/${id}`,
    options
  );
};

export const getApiV1Rename = <TData = AxiosResponse<RenameBookResource[]>>(
  params?: GetApiV1RenameParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/rename`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1Retag = <TData = AxiosResponse<RetagBookResource[]>>(
  params?: GetApiV1RetagParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/retag`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const postApiV1Rootfolder = <TData = AxiosResponse<RootFolderResource>>(
  rootFolderResource: RootFolderResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/rootfolder`,
    rootFolderResource,
    options
  );
};

export const getApiV1Rootfolder = <TData = AxiosResponse<RootFolderResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/rootfolder`, options);
};

export const putApiV1RootfolderId = <TData = AxiosResponse<RootFolderResource>>(
  id: string | undefined | null,
  rootFolderResource: RootFolderResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/rootfolder/${id}`,
    rootFolderResource,
    options
  );
};

export const deleteApiV1RootfolderId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/rootfolder/${id}`, options);
};

export const getApiV1RootfolderId = <TData = AxiosResponse<RootFolderResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/rootfolder/${id}`, options);
};

export const getApiV1Search = <TData = AxiosResponse<void>>(
  params?: GetApiV1SearchParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/search`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getApiV1Series = <TData = AxiosResponse<SeriesResource[]>>(
  params?: GetApiV1SeriesParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/series`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getContentPath = <TData = AxiosResponse<void>>(
  path: string | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/content/${path}`, options);
};

export const get = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/`, options);
};

export const getPath = <TData = AxiosResponse<void>>(
  path: string | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/${path}`, options);
};

export const getApiV1SystemStatus = <TData = AxiosResponse<SystemResource>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/system/status`, options);
};

export const getApiV1SystemRoutes = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/system/routes`, options);
};

export const getApiV1SystemRoutesDuplicate = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/system/routes/duplicate`,
    options
  );
};

export const postApiV1SystemShutdown = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/system/shutdown`,
    undefined,
    options
  );
};

export const postApiV1SystemRestart = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `http://localhost:3001/api/v1/system/restart`,
    undefined,
    options
  );
};

export const getApiV1Tag = <TData = AxiosResponse<TagResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/tag`, options);
};

export const postApiV1Tag = <TData = AxiosResponse<TagResource>>(
  tagResource: TagResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`http://localhost:3001/api/v1/tag`, tagResource, options);
};

export const putApiV1TagId = <TData = AxiosResponse<TagResource>>(
  id: string | undefined | null,
  tagResource: TagResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/tag/${id}`,
    tagResource,
    options
  );
};

export const deleteApiV1TagId = <TData = AxiosResponse<void>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`http://localhost:3001/api/v1/tag/${id}`, options);
};

export const getApiV1TagId = <TData = AxiosResponse<TagResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/tag/${id}`, options);
};

export const getApiV1TagDetail = <TData = AxiosResponse<TagDetailsResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/tag/detail`, options);
};

export const getApiV1TagDetailId = <TData = AxiosResponse<TagDetailsResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/tag/detail/${id}`, options);
};

export const getApiV1SystemTask = <TData = AxiosResponse<TaskResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/system/task`, options);
};

export const getApiV1SystemTaskId = <TData = AxiosResponse<TaskResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/system/task/${id}`, options);
};

export const putApiV1ConfigUiId = <TData = AxiosResponse<UiConfigResource>>(
  id: string | undefined | null,
  uiConfigResource: UiConfigResource,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `http://localhost:3001/api/v1/config/ui/${id}`,
    uiConfigResource,
    options
  );
};

export const getApiV1ConfigUiId = <TData = AxiosResponse<UiConfigResource>>(
  id: number | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/ui/${id}`, options);
};

export const getApiV1ConfigUi = <TData = AxiosResponse<UiConfigResource>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/config/ui`, options);
};

export const getApiV1Update = <TData = AxiosResponse<UpdateResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/update`, options);
};

export const getApiV1LogFileUpdate = <TData = AxiosResponse<LogFileResource[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`http://localhost:3001/api/v1/log/file/update`, options);
};

export const getApiV1LogFileUpdateFilename = <TData = AxiosResponse<void>>(
  filename: string | undefined | null,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `http://localhost:3001/api/v1/log/file/update/${filename}`,
    options
  );
};

export type GetApiResult = AxiosResponse<ApiInfoResource>;
export type PostLoginResult = AxiosResponse<void>;
export type GetLoginResult = AxiosResponse<void>;
export type GetLogoutResult = AxiosResponse<void>;
export type GetApiV1AuthorResult = AxiosResponse<AuthorResource[]>;
export type PostApiV1AuthorResult = AxiosResponse<AuthorResource>;
export type PutApiV1AuthorIdResult = AxiosResponse<AuthorResource>;
export type DeleteApiV1AuthorIdResult = AxiosResponse<void>;
export type GetApiV1AuthorIdResult = AxiosResponse<AuthorResource>;
export type PutApiV1AuthorEditorResult = AxiosResponse<void>;
export type DeleteApiV1AuthorEditorResult = AxiosResponse<void>;
export type GetApiV1AuthorLookupResult = AxiosResponse<void>;
export type GetApiV1SystemBackupResult = AxiosResponse<BackupResource[]>;
export type DeleteApiV1SystemBackupIdResult = AxiosResponse<void>;
export type PostApiV1SystemBackupRestoreIdResult = AxiosResponse<void>;
export type PostApiV1SystemBackupRestoreUploadResult = AxiosResponse<void>;
export type GetApiV1BlocklistResult =
  AxiosResponse<BlocklistResourcePagingResource>;
export type DeleteApiV1BlocklistIdResult = AxiosResponse<void>;
export type DeleteApiV1BlocklistBulkResult = AxiosResponse<void>;
export type GetApiV1BookResult = AxiosResponse<BookResource[]>;
export type PostApiV1BookResult = AxiosResponse<BookResource>;
export type GetApiV1BookIdOverviewResult = AxiosResponse<void>;
export type PutApiV1BookIdResult = AxiosResponse<BookResource>;
export type DeleteApiV1BookIdResult = AxiosResponse<void>;
export type GetApiV1BookIdResult = AxiosResponse<BookResource>;
export type PutApiV1BookMonitorResult = AxiosResponse<void>;
export type PutApiV1BookEditorResult = AxiosResponse<void>;
export type DeleteApiV1BookEditorResult = AxiosResponse<void>;
export type GetApiV1BookfileResult = AxiosResponse<BookFileResource[]>;
export type PutApiV1BookfileIdResult = AxiosResponse<BookFileResource>;
export type DeleteApiV1BookfileIdResult = AxiosResponse<void>;
export type GetApiV1BookfileIdResult = AxiosResponse<BookFileResource>;
export type PutApiV1BookfileEditorResult = AxiosResponse<void>;
export type DeleteApiV1BookfileBulkResult = AxiosResponse<void>;
export type GetApiV1BookLookupResult = AxiosResponse<void>;
export type PostApiV1BookshelfResult = AxiosResponse<void>;
export type GetApiV1CalendarResult = AxiosResponse<BookResource[]>;
export type GetApiV1CalendarIdResult = AxiosResponse<BookResource>;
export type GetFeedV1CalendarReadarrIcsResult = AxiosResponse<void>;
export type PostApiV1CommandResult = AxiosResponse<CommandResource>;
export type GetApiV1CommandResult = AxiosResponse<CommandResource[]>;
export type DeleteApiV1CommandIdResult = AxiosResponse<void>;
export type GetApiV1CommandIdResult = AxiosResponse<CommandResource>;
export type GetApiV1CustomfilterResult = AxiosResponse<CustomFilterResource[]>;
export type PostApiV1CustomfilterResult = AxiosResponse<CustomFilterResource>;
export type PutApiV1CustomfilterIdResult = AxiosResponse<CustomFilterResource>;
export type DeleteApiV1CustomfilterIdResult = AxiosResponse<void>;
export type GetApiV1CustomfilterIdResult = AxiosResponse<CustomFilterResource>;
export type PostApiV1CustomformatResult = AxiosResponse<CustomFormatResource>;
export type GetApiV1CustomformatResult = AxiosResponse<CustomFormatResource[]>;
export type PutApiV1CustomformatIdResult = AxiosResponse<CustomFormatResource>;
export type DeleteApiV1CustomformatIdResult = AxiosResponse<void>;
export type GetApiV1CustomformatIdResult = AxiosResponse<CustomFormatResource>;
export type GetApiV1CustomformatSchemaResult = AxiosResponse<void>;
export type GetApiV1WantedCutoffResult =
  AxiosResponse<BookResourcePagingResource>;
export type GetApiV1WantedCutoffIdResult = AxiosResponse<BookResource>;
export type PostApiV1DelayprofileResult = AxiosResponse<DelayProfileResource>;
export type GetApiV1DelayprofileResult = AxiosResponse<DelayProfileResource[]>;
export type DeleteApiV1DelayprofileIdResult = AxiosResponse<void>;
export type PutApiV1DelayprofileIdResult = AxiosResponse<DelayProfileResource>;
export type GetApiV1DelayprofileIdResult = AxiosResponse<DelayProfileResource>;
export type PutApiV1DelayprofileReorderIdResult = AxiosResponse<void>;
export type GetApiV1ConfigDevelopmentResult =
  AxiosResponse<DevelopmentConfigResource>;
export type PutApiV1ConfigDevelopmentIdResult =
  AxiosResponse<DevelopmentConfigResource>;
export type GetApiV1ConfigDevelopmentIdResult =
  AxiosResponse<DevelopmentConfigResource>;
export type GetApiV1DiskspaceResult = AxiosResponse<DiskSpaceResource[]>;
export type GetApiV1DownloadclientResult = AxiosResponse<
  DownloadClientResource[]
>;
export type PostApiV1DownloadclientResult =
  AxiosResponse<DownloadClientResource>;
export type PutApiV1DownloadclientIdResult =
  AxiosResponse<DownloadClientResource>;
export type DeleteApiV1DownloadclientIdResult = AxiosResponse<void>;
export type GetApiV1DownloadclientIdResult =
  AxiosResponse<DownloadClientResource>;
export type PutApiV1DownloadclientBulkResult =
  AxiosResponse<DownloadClientResource>;
export type DeleteApiV1DownloadclientBulkResult = AxiosResponse<void>;
export type GetApiV1DownloadclientSchemaResult = AxiosResponse<
  DownloadClientResource[]
>;
export type PostApiV1DownloadclientTestResult = AxiosResponse<void>;
export type PostApiV1DownloadclientTestallResult = AxiosResponse<void>;
export type PostApiV1DownloadclientActionNameResult = AxiosResponse<void>;
export type GetApiV1ConfigDownloadclientResult =
  AxiosResponse<DownloadClientConfigResource>;
export type PutApiV1ConfigDownloadclientIdResult =
  AxiosResponse<DownloadClientConfigResource>;
export type GetApiV1ConfigDownloadclientIdResult =
  AxiosResponse<DownloadClientConfigResource>;
export type GetApiV1EditionResult = AxiosResponse<EditionResource[]>;
export type GetApiV1FilesystemResult = AxiosResponse<void>;
export type GetApiV1FilesystemTypeResult = AxiosResponse<void>;
export type GetApiV1FilesystemMediafilesResult = AxiosResponse<void>;
export type GetApiV1HealthResult = AxiosResponse<HealthResource[]>;
export type GetApiV1HistoryResult =
  AxiosResponse<HistoryResourcePagingResource>;
export type GetApiV1HistorySinceResult = AxiosResponse<HistoryResource[]>;
export type GetApiV1HistoryAuthorResult = AxiosResponse<HistoryResource[]>;
export type PostApiV1HistoryFailedIdResult = AxiosResponse<void>;
export type GetApiV1ConfigHostResult = AxiosResponse<HostConfigResource>;
export type PutApiV1ConfigHostIdResult = AxiosResponse<HostConfigResource>;
export type GetApiV1ConfigHostIdResult = AxiosResponse<HostConfigResource>;
export type GetApiV1ImportlistResult = AxiosResponse<ImportListResource[]>;
export type PostApiV1ImportlistResult = AxiosResponse<ImportListResource>;
export type PutApiV1ImportlistIdResult = AxiosResponse<ImportListResource>;
export type DeleteApiV1ImportlistIdResult = AxiosResponse<void>;
export type GetApiV1ImportlistIdResult = AxiosResponse<ImportListResource>;
export type PutApiV1ImportlistBulkResult = AxiosResponse<ImportListResource>;
export type DeleteApiV1ImportlistBulkResult = AxiosResponse<void>;
export type GetApiV1ImportlistSchemaResult = AxiosResponse<
  ImportListResource[]
>;
export type PostApiV1ImportlistTestResult = AxiosResponse<void>;
export type PostApiV1ImportlistTestallResult = AxiosResponse<void>;
export type PostApiV1ImportlistActionNameResult = AxiosResponse<void>;
export type GetApiV1ImportlistexclusionResult = AxiosResponse<
  ImportListExclusionResource[]
>;
export type PostApiV1ImportlistexclusionResult =
  AxiosResponse<ImportListExclusionResource>;
export type PutApiV1ImportlistexclusionIdResult =
  AxiosResponse<ImportListExclusionResource>;
export type DeleteApiV1ImportlistexclusionIdResult = AxiosResponse<void>;
export type GetApiV1ImportlistexclusionIdResult =
  AxiosResponse<ImportListExclusionResource>;
export type GetApiV1IndexerResult = AxiosResponse<IndexerResource[]>;
export type PostApiV1IndexerResult = AxiosResponse<IndexerResource>;
export type PutApiV1IndexerIdResult = AxiosResponse<IndexerResource>;
export type DeleteApiV1IndexerIdResult = AxiosResponse<void>;
export type GetApiV1IndexerIdResult = AxiosResponse<IndexerResource>;
export type PutApiV1IndexerBulkResult = AxiosResponse<IndexerResource>;
export type DeleteApiV1IndexerBulkResult = AxiosResponse<void>;
export type GetApiV1IndexerSchemaResult = AxiosResponse<IndexerResource[]>;
export type PostApiV1IndexerTestResult = AxiosResponse<void>;
export type PostApiV1IndexerTestallResult = AxiosResponse<void>;
export type PostApiV1IndexerActionNameResult = AxiosResponse<void>;
export type GetApiV1ConfigIndexerResult = AxiosResponse<IndexerConfigResource>;
export type PutApiV1ConfigIndexerIdResult =
  AxiosResponse<IndexerConfigResource>;
export type GetApiV1ConfigIndexerIdResult =
  AxiosResponse<IndexerConfigResource>;
export type GetApiV1IndexerflagResult = AxiosResponse<IndexerFlagResource[]>;
export type GetApiV1LanguageResult = AxiosResponse<LanguageResource[]>;
export type GetApiV1LanguageIdResult = AxiosResponse<LanguageResource>;
export type GetApiV1LocalizationResult = AxiosResponse<string>;
export type GetApiV1LogResult = AxiosResponse<LogResourcePagingResource>;
export type GetApiV1LogFileResult = AxiosResponse<LogFileResource[]>;
export type GetApiV1LogFileFilenameResult = AxiosResponse<void>;
export type PostApiV1ManualimportResult = AxiosResponse<void>;
export type GetApiV1ManualimportResult = AxiosResponse<ManualImportResource[]>;
export type GetApiV1MediacoverAuthorAuthorIdFilenameResult =
  AxiosResponse<void>;
export type GetApiV1MediacoverBookBookIdFilenameResult = AxiosResponse<void>;
export type GetApiV1ConfigMediamanagementResult =
  AxiosResponse<MediaManagementConfigResource>;
export type PutApiV1ConfigMediamanagementIdResult =
  AxiosResponse<MediaManagementConfigResource>;
export type GetApiV1ConfigMediamanagementIdResult =
  AxiosResponse<MediaManagementConfigResource>;
export type GetApiV1MetadataResult = AxiosResponse<MetadataResource[]>;
export type PostApiV1MetadataResult = AxiosResponse<MetadataResource>;
export type PutApiV1MetadataIdResult = AxiosResponse<MetadataResource>;
export type DeleteApiV1MetadataIdResult = AxiosResponse<void>;
export type GetApiV1MetadataIdResult = AxiosResponse<MetadataResource>;
export type GetApiV1MetadataSchemaResult = AxiosResponse<MetadataResource[]>;
export type PostApiV1MetadataTestResult = AxiosResponse<void>;
export type PostApiV1MetadataTestallResult = AxiosResponse<void>;
export type PostApiV1MetadataActionNameResult = AxiosResponse<void>;
export type PostApiV1MetadataprofileResult =
  AxiosResponse<MetadataProfileResource>;
export type GetApiV1MetadataprofileResult = AxiosResponse<
  MetadataProfileResource[]
>;
export type DeleteApiV1MetadataprofileIdResult = AxiosResponse<void>;
export type PutApiV1MetadataprofileIdResult =
  AxiosResponse<MetadataProfileResource>;
export type GetApiV1MetadataprofileIdResult =
  AxiosResponse<MetadataProfileResource>;
export type GetApiV1MetadataprofileSchemaResult =
  AxiosResponse<MetadataProfileResource>;
export type GetApiV1ConfigMetadataproviderResult =
  AxiosResponse<MetadataProviderConfigResource>;
export type PutApiV1ConfigMetadataproviderIdResult =
  AxiosResponse<MetadataProviderConfigResource>;
export type GetApiV1ConfigMetadataproviderIdResult =
  AxiosResponse<MetadataProviderConfigResource>;
export type GetApiV1WantedMissingResult =
  AxiosResponse<BookResourcePagingResource>;
export type GetApiV1WantedMissingIdResult = AxiosResponse<BookResource>;
export type GetApiV1ConfigNamingResult = AxiosResponse<NamingConfigResource>;
export type PutApiV1ConfigNamingIdResult = AxiosResponse<NamingConfigResource>;
export type GetApiV1ConfigNamingIdResult = AxiosResponse<NamingConfigResource>;
export type GetApiV1ConfigNamingExamplesResult = AxiosResponse<void>;
export type GetApiV1NotificationResult = AxiosResponse<NotificationResource[]>;
export type PostApiV1NotificationResult = AxiosResponse<NotificationResource>;
export type PutApiV1NotificationIdResult = AxiosResponse<NotificationResource>;
export type DeleteApiV1NotificationIdResult = AxiosResponse<void>;
export type GetApiV1NotificationIdResult = AxiosResponse<NotificationResource>;
export type GetApiV1NotificationSchemaResult = AxiosResponse<
  NotificationResource[]
>;
export type PostApiV1NotificationTestResult = AxiosResponse<void>;
export type PostApiV1NotificationTestallResult = AxiosResponse<void>;
export type PostApiV1NotificationActionNameResult = AxiosResponse<void>;
export type GetApiV1ParseResult = AxiosResponse<ParseResource>;
export type GetPingResult = AxiosResponse<PingResource>;
export type HeadPingResult = AxiosResponse<PingResource>;
export type PutApiV1QualitydefinitionIdResult =
  AxiosResponse<QualityDefinitionResource>;
export type GetApiV1QualitydefinitionIdResult =
  AxiosResponse<QualityDefinitionResource>;
export type GetApiV1QualitydefinitionResult = AxiosResponse<
  QualityDefinitionResource[]
>;
export type PutApiV1QualitydefinitionUpdateResult = AxiosResponse<void>;
export type PostApiV1QualityprofileResult =
  AxiosResponse<QualityProfileResource>;
export type GetApiV1QualityprofileResult = AxiosResponse<
  QualityProfileResource[]
>;
export type DeleteApiV1QualityprofileIdResult = AxiosResponse<void>;
export type PutApiV1QualityprofileIdResult =
  AxiosResponse<QualityProfileResource>;
export type GetApiV1QualityprofileIdResult =
  AxiosResponse<QualityProfileResource>;
export type GetApiV1QualityprofileSchemaResult =
  AxiosResponse<QualityProfileResource>;
export type DeleteApiV1QueueIdResult = AxiosResponse<void>;
export type DeleteApiV1QueueBulkResult = AxiosResponse<void>;
export type GetApiV1QueueResult = AxiosResponse<QueueResourcePagingResource>;
export type PostApiV1QueueGrabIdResult = AxiosResponse<void>;
export type PostApiV1QueueGrabBulkResult = AxiosResponse<void>;
export type GetApiV1QueueDetailsResult = AxiosResponse<QueueResource[]>;
export type GetApiV1QueueStatusResult = AxiosResponse<QueueStatusResource>;
export type PostApiV1ReleaseResult = AxiosResponse<ReleaseResource>;
export type GetApiV1ReleaseResult = AxiosResponse<ReleaseResource[]>;
export type GetApiV1ReleaseprofileResult = AxiosResponse<
  ReleaseProfileResource[]
>;
export type PostApiV1ReleaseprofileResult =
  AxiosResponse<ReleaseProfileResource>;
export type PutApiV1ReleaseprofileIdResult =
  AxiosResponse<ReleaseProfileResource>;
export type DeleteApiV1ReleaseprofileIdResult = AxiosResponse<void>;
export type GetApiV1ReleaseprofileIdResult =
  AxiosResponse<ReleaseProfileResource>;
export type PostApiV1ReleasePushResult = AxiosResponse<ReleaseResource>;
export type PostApiV1RemotepathmappingResult =
  AxiosResponse<RemotePathMappingResource>;
export type GetApiV1RemotepathmappingResult = AxiosResponse<
  RemotePathMappingResource[]
>;
export type DeleteApiV1RemotepathmappingIdResult = AxiosResponse<void>;
export type PutApiV1RemotepathmappingIdResult =
  AxiosResponse<RemotePathMappingResource>;
export type GetApiV1RemotepathmappingIdResult =
  AxiosResponse<RemotePathMappingResource>;
export type GetApiV1RenameResult = AxiosResponse<RenameBookResource[]>;
export type GetApiV1RetagResult = AxiosResponse<RetagBookResource[]>;
export type PostApiV1RootfolderResult = AxiosResponse<RootFolderResource>;
export type GetApiV1RootfolderResult = AxiosResponse<RootFolderResource[]>;
export type PutApiV1RootfolderIdResult = AxiosResponse<RootFolderResource>;
export type DeleteApiV1RootfolderIdResult = AxiosResponse<void>;
export type GetApiV1RootfolderIdResult = AxiosResponse<RootFolderResource>;
export type GetApiV1SearchResult = AxiosResponse<void>;
export type GetApiV1SeriesResult = AxiosResponse<SeriesResource[]>;
export type GetContentPathResult = AxiosResponse<void>;
export type GetResult = AxiosResponse<void>;
export type GetPathResult = AxiosResponse<void>;
export type GetApiV1SystemStatusResult = AxiosResponse<SystemResource>;
export type GetApiV1SystemRoutesResult = AxiosResponse<void>;
export type GetApiV1SystemRoutesDuplicateResult = AxiosResponse<void>;
export type PostApiV1SystemShutdownResult = AxiosResponse<void>;
export type PostApiV1SystemRestartResult = AxiosResponse<void>;
export type GetApiV1TagResult = AxiosResponse<TagResource[]>;
export type PostApiV1TagResult = AxiosResponse<TagResource>;
export type PutApiV1TagIdResult = AxiosResponse<TagResource>;
export type DeleteApiV1TagIdResult = AxiosResponse<void>;
export type GetApiV1TagIdResult = AxiosResponse<TagResource>;
export type GetApiV1TagDetailResult = AxiosResponse<TagDetailsResource[]>;
export type GetApiV1TagDetailIdResult = AxiosResponse<TagDetailsResource>;
export type GetApiV1SystemTaskResult = AxiosResponse<TaskResource[]>;
export type GetApiV1SystemTaskIdResult = AxiosResponse<TaskResource>;
export type PutApiV1ConfigUiIdResult = AxiosResponse<UiConfigResource>;
export type GetApiV1ConfigUiIdResult = AxiosResponse<UiConfigResource>;
export type GetApiV1ConfigUiResult = AxiosResponse<UiConfigResource>;
export type GetApiV1UpdateResult = AxiosResponse<UpdateResource[]>;
export type GetApiV1LogFileUpdateResult = AxiosResponse<LogFileResource[]>;
export type GetApiV1LogFileUpdateFilenameResult = AxiosResponse<void>;
